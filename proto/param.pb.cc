// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hityavie {

namespace {

const ::google::protobuf::Descriptor* YavieParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YavieParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImuNoiseParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImuNoiseParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* FisheyeCameraParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FisheyeCameraParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpticalflowTrackerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpticalflowTrackerParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SfmParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SfmParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_param_2eproto() {
  protobuf_AddDesc_param_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "param.proto");
  GOOGLE_CHECK(file != NULL);
  YavieParameter_descriptor_ = file->message_type(0);
  static const int YavieParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YavieParameter, cam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YavieParameter, np_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YavieParameter, tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YavieParameter, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YavieParameter, gravity_),
  };
  YavieParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YavieParameter_descriptor_,
      YavieParameter::default_instance_,
      YavieParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YavieParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YavieParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YavieParameter));
  ImuNoiseParameter_descriptor_ = file->message_type(1);
  static const int ImuNoiseParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuNoiseParameter, acc_noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuNoiseParameter, gyr_noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuNoiseParameter, ba_noise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuNoiseParameter, bg_noise_),
  };
  ImuNoiseParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImuNoiseParameter_descriptor_,
      ImuNoiseParameter::default_instance_,
      ImuNoiseParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuNoiseParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuNoiseParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImuNoiseParameter));
  CameraParam_descriptor_ = file->message_type(2);
  static const int CameraParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParam, tic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParam, fisheye_param_),
  };
  CameraParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraParam_descriptor_,
      CameraParam::default_instance_,
      CameraParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraParam));
  FisheyeCameraParam_descriptor_ = file->message_type(3);
  static const int FisheyeCameraParam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, fx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, fy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, cy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, height_),
  };
  FisheyeCameraParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FisheyeCameraParam_descriptor_,
      FisheyeCameraParam::default_instance_,
      FisheyeCameraParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FisheyeCameraParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FisheyeCameraParam));
  TrackerParam_descriptor_ = file->message_type(4);
  static const int TrackerParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerParam, of_param_),
  };
  TrackerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackerParam_descriptor_,
      TrackerParam::default_instance_,
      TrackerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackerParam));
  OpticalflowTrackerParam_descriptor_ = file->message_type(5);
  static const int OpticalflowTrackerParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalflowTrackerParam, min_feat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalflowTrackerParam, nms_dist_thre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalflowTrackerParam, det_thre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalflowTrackerParam, bd_thre_),
  };
  OpticalflowTrackerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpticalflowTrackerParam_descriptor_,
      OpticalflowTrackerParam::default_instance_,
      OpticalflowTrackerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalflowTrackerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticalflowTrackerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpticalflowTrackerParam));
  SfmParam_descriptor_ = file->message_type(6);
  static const int SfmParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SfmParam, min_eff_obs_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SfmParam, max_frm_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SfmParam, local_win_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SfmParam, min_tracking_feat_num_),
  };
  SfmParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SfmParam_descriptor_,
      SfmParam::default_instance_,
      SfmParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SfmParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SfmParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SfmParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_param_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YavieParameter_descriptor_, &YavieParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImuNoiseParameter_descriptor_, &ImuNoiseParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraParam_descriptor_, &CameraParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FisheyeCameraParam_descriptor_, &FisheyeCameraParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackerParam_descriptor_, &TrackerParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpticalflowTrackerParam_descriptor_, &OpticalflowTrackerParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SfmParam_descriptor_, &SfmParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_param_2eproto() {
  delete YavieParameter::default_instance_;
  delete YavieParameter_reflection_;
  delete ImuNoiseParameter::default_instance_;
  delete ImuNoiseParameter_reflection_;
  delete CameraParam::default_instance_;
  delete CameraParam_reflection_;
  delete FisheyeCameraParam::default_instance_;
  delete FisheyeCameraParam_reflection_;
  delete TrackerParam::default_instance_;
  delete TrackerParam_reflection_;
  delete OpticalflowTrackerParam::default_instance_;
  delete OpticalflowTrackerParam_reflection_;
  delete SfmParam::default_instance_;
  delete SfmParam_reflection_;
}

void protobuf_AddDesc_param_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013param.proto\022\010hityavie\"\262\001\n\016YavieParamet"
    "er\022\"\n\003cam\030\001 \002(\0132\025.hityavie.CameraParam\022\'"
    "\n\002np\030\002 \002(\0132\033.hityavie.ImuNoiseParameter\022"
    "\"\n\002tp\030\003 \002(\0132\026.hityavie.TrackerParam\022\036\n\002s"
    "p\030\004 \002(\0132\022.hityavie.SfmParam\022\017\n\007gravity\030\005"
    " \002(\001\"]\n\021ImuNoiseParameter\022\021\n\tacc_noise\030\001"
    " \002(\001\022\021\n\tgyr_noise\030\002 \002(\001\022\020\n\010ba_noise\030\003 \002("
    "\001\022\020\n\010bg_noise\030\004 \002(\001\"]\n\013CameraParam\022\014\n\004ty"
    "pe\030\001 \002(\t\022\013\n\003tic\030\002 \003(\001\0223\n\rfisheye_param\030\003"
    " \001(\0132\034.hityavie.FisheyeCameraParam\"q\n\022Fi"
    "sheyeCameraParam\022\n\n\002fx\030\001 \002(\001\022\n\n\002fy\030\002 \002(\001"
    "\022\n\n\002cx\030\003 \002(\001\022\n\n\002cy\030\004 \002(\001\022\014\n\004dist\030\005 \003(\001\022\r"
    "\n\005width\030\006 \002(\005\022\016\n\006height\030\007 \002(\005\"Q\n\014Tracker"
    "Param\022\014\n\004type\030\001 \002(\t\0223\n\010of_param\030\002 \001(\0132!."
    "hityavie.OpticalflowTrackerParam\"i\n\027Opti"
    "calflowTrackerParam\022\024\n\014min_feat_num\030\001 \002("
    "\005\022\025\n\rnms_dist_thre\030\002 \002(\001\022\020\n\010det_thre\030\003 \002"
    "(\005\022\017\n\007bd_thre\030\004 \002(\001\"t\n\010SfmParam\022\027\n\017min_e"
    "ff_obs_num\030\001 \002(\005\022\030\n\020max_frm_interval\030\002 \002"
    "(\005\022\026\n\016local_win_size\030\003 \002(\005\022\035\n\025min_tracki"
    "ng_feat_num\030\004 \002(\005", 817);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "param.proto", &protobuf_RegisterTypes);
  YavieParameter::default_instance_ = new YavieParameter();
  ImuNoiseParameter::default_instance_ = new ImuNoiseParameter();
  CameraParam::default_instance_ = new CameraParam();
  FisheyeCameraParam::default_instance_ = new FisheyeCameraParam();
  TrackerParam::default_instance_ = new TrackerParam();
  OpticalflowTrackerParam::default_instance_ = new OpticalflowTrackerParam();
  SfmParam::default_instance_ = new SfmParam();
  YavieParameter::default_instance_->InitAsDefaultInstance();
  ImuNoiseParameter::default_instance_->InitAsDefaultInstance();
  CameraParam::default_instance_->InitAsDefaultInstance();
  FisheyeCameraParam::default_instance_->InitAsDefaultInstance();
  TrackerParam::default_instance_->InitAsDefaultInstance();
  OpticalflowTrackerParam::default_instance_->InitAsDefaultInstance();
  SfmParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_param_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_param_2eproto {
  StaticDescriptorInitializer_param_2eproto() {
    protobuf_AddDesc_param_2eproto();
  }
} static_descriptor_initializer_param_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int YavieParameter::kCamFieldNumber;
const int YavieParameter::kNpFieldNumber;
const int YavieParameter::kTpFieldNumber;
const int YavieParameter::kSpFieldNumber;
const int YavieParameter::kGravityFieldNumber;
#endif  // !_MSC_VER

YavieParameter::YavieParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.YavieParameter)
}

void YavieParameter::InitAsDefaultInstance() {
  cam_ = const_cast< ::hityavie::CameraParam*>(&::hityavie::CameraParam::default_instance());
  np_ = const_cast< ::hityavie::ImuNoiseParameter*>(&::hityavie::ImuNoiseParameter::default_instance());
  tp_ = const_cast< ::hityavie::TrackerParam*>(&::hityavie::TrackerParam::default_instance());
  sp_ = const_cast< ::hityavie::SfmParam*>(&::hityavie::SfmParam::default_instance());
}

YavieParameter::YavieParameter(const YavieParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hityavie.YavieParameter)
}

void YavieParameter::SharedCtor() {
  _cached_size_ = 0;
  cam_ = NULL;
  np_ = NULL;
  tp_ = NULL;
  sp_ = NULL;
  gravity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YavieParameter::~YavieParameter() {
  // @@protoc_insertion_point(destructor:hityavie.YavieParameter)
  SharedDtor();
}

void YavieParameter::SharedDtor() {
  if (this != default_instance_) {
    delete cam_;
    delete np_;
    delete tp_;
    delete sp_;
  }
}

void YavieParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YavieParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YavieParameter_descriptor_;
}

const YavieParameter& YavieParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_param_2eproto();
  return *default_instance_;
}

YavieParameter* YavieParameter::default_instance_ = NULL;

YavieParameter* YavieParameter::New() const {
  return new YavieParameter;
}

void YavieParameter::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_cam()) {
      if (cam_ != NULL) cam_->::hityavie::CameraParam::Clear();
    }
    if (has_np()) {
      if (np_ != NULL) np_->::hityavie::ImuNoiseParameter::Clear();
    }
    if (has_tp()) {
      if (tp_ != NULL) tp_->::hityavie::TrackerParam::Clear();
    }
    if (has_sp()) {
      if (sp_ != NULL) sp_->::hityavie::SfmParam::Clear();
    }
    gravity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YavieParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.YavieParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hityavie.CameraParam cam = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_np;
        break;
      }

      // required .hityavie.ImuNoiseParameter np = 2;
      case 2: {
        if (tag == 18) {
         parse_np:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_np()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tp;
        break;
      }

      // required .hityavie.TrackerParam tp = 3;
      case 3: {
        if (tag == 26) {
         parse_tp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sp;
        break;
      }

      // required .hityavie.SfmParam sp = 4;
      case 4: {
        if (tag == 34) {
         parse_sp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_gravity;
        break;
      }

      // required double gravity = 5;
      case 5: {
        if (tag == 41) {
         parse_gravity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gravity_)));
          set_has_gravity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.YavieParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.YavieParameter)
  return false;
#undef DO_
}

void YavieParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.YavieParameter)
  // required .hityavie.CameraParam cam = 1;
  if (has_cam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cam(), output);
  }

  // required .hityavie.ImuNoiseParameter np = 2;
  if (has_np()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->np(), output);
  }

  // required .hityavie.TrackerParam tp = 3;
  if (has_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tp(), output);
  }

  // required .hityavie.SfmParam sp = 4;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sp(), output);
  }

  // required double gravity = 5;
  if (has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gravity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.YavieParameter)
}

::google::protobuf::uint8* YavieParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.YavieParameter)
  // required .hityavie.CameraParam cam = 1;
  if (has_cam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cam(), target);
  }

  // required .hityavie.ImuNoiseParameter np = 2;
  if (has_np()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->np(), target);
  }

  // required .hityavie.TrackerParam tp = 3;
  if (has_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tp(), target);
  }

  // required .hityavie.SfmParam sp = 4;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sp(), target);
  }

  // required double gravity = 5;
  if (has_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gravity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.YavieParameter)
  return target;
}

int YavieParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .hityavie.CameraParam cam = 1;
    if (has_cam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cam());
    }

    // required .hityavie.ImuNoiseParameter np = 2;
    if (has_np()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->np());
    }

    // required .hityavie.TrackerParam tp = 3;
    if (has_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tp());
    }

    // required .hityavie.SfmParam sp = 4;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sp());
    }

    // required double gravity = 5;
    if (has_gravity()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YavieParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YavieParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YavieParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YavieParameter::MergeFrom(const YavieParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cam()) {
      mutable_cam()->::hityavie::CameraParam::MergeFrom(from.cam());
    }
    if (from.has_np()) {
      mutable_np()->::hityavie::ImuNoiseParameter::MergeFrom(from.np());
    }
    if (from.has_tp()) {
      mutable_tp()->::hityavie::TrackerParam::MergeFrom(from.tp());
    }
    if (from.has_sp()) {
      mutable_sp()->::hityavie::SfmParam::MergeFrom(from.sp());
    }
    if (from.has_gravity()) {
      set_gravity(from.gravity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YavieParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YavieParameter::CopyFrom(const YavieParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YavieParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_cam()) {
    if (!this->cam().IsInitialized()) return false;
  }
  if (has_np()) {
    if (!this->np().IsInitialized()) return false;
  }
  if (has_tp()) {
    if (!this->tp().IsInitialized()) return false;
  }
  if (has_sp()) {
    if (!this->sp().IsInitialized()) return false;
  }
  return true;
}

void YavieParameter::Swap(YavieParameter* other) {
  if (other != this) {
    std::swap(cam_, other->cam_);
    std::swap(np_, other->np_);
    std::swap(tp_, other->tp_);
    std::swap(sp_, other->sp_);
    std::swap(gravity_, other->gravity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YavieParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YavieParameter_descriptor_;
  metadata.reflection = YavieParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImuNoiseParameter::kAccNoiseFieldNumber;
const int ImuNoiseParameter::kGyrNoiseFieldNumber;
const int ImuNoiseParameter::kBaNoiseFieldNumber;
const int ImuNoiseParameter::kBgNoiseFieldNumber;
#endif  // !_MSC_VER

ImuNoiseParameter::ImuNoiseParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.ImuNoiseParameter)
}

void ImuNoiseParameter::InitAsDefaultInstance() {
}

ImuNoiseParameter::ImuNoiseParameter(const ImuNoiseParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hityavie.ImuNoiseParameter)
}

void ImuNoiseParameter::SharedCtor() {
  _cached_size_ = 0;
  acc_noise_ = 0;
  gyr_noise_ = 0;
  ba_noise_ = 0;
  bg_noise_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImuNoiseParameter::~ImuNoiseParameter() {
  // @@protoc_insertion_point(destructor:hityavie.ImuNoiseParameter)
  SharedDtor();
}

void ImuNoiseParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImuNoiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuNoiseParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImuNoiseParameter_descriptor_;
}

const ImuNoiseParameter& ImuNoiseParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_param_2eproto();
  return *default_instance_;
}

ImuNoiseParameter* ImuNoiseParameter::default_instance_ = NULL;

ImuNoiseParameter* ImuNoiseParameter::New() const {
  return new ImuNoiseParameter;
}

void ImuNoiseParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ImuNoiseParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(acc_noise_, bg_noise_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImuNoiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.ImuNoiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double acc_noise = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_noise_)));
          set_has_acc_noise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_gyr_noise;
        break;
      }

      // required double gyr_noise = 2;
      case 2: {
        if (tag == 17) {
         parse_gyr_noise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyr_noise_)));
          set_has_gyr_noise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ba_noise;
        break;
      }

      // required double ba_noise = 3;
      case 3: {
        if (tag == 25) {
         parse_ba_noise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ba_noise_)));
          set_has_ba_noise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bg_noise;
        break;
      }

      // required double bg_noise = 4;
      case 4: {
        if (tag == 33) {
         parse_bg_noise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bg_noise_)));
          set_has_bg_noise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.ImuNoiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.ImuNoiseParameter)
  return false;
#undef DO_
}

void ImuNoiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.ImuNoiseParameter)
  // required double acc_noise = 1;
  if (has_acc_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_noise(), output);
  }

  // required double gyr_noise = 2;
  if (has_gyr_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gyr_noise(), output);
  }

  // required double ba_noise = 3;
  if (has_ba_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ba_noise(), output);
  }

  // required double bg_noise = 4;
  if (has_bg_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bg_noise(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.ImuNoiseParameter)
}

::google::protobuf::uint8* ImuNoiseParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.ImuNoiseParameter)
  // required double acc_noise = 1;
  if (has_acc_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_noise(), target);
  }

  // required double gyr_noise = 2;
  if (has_gyr_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gyr_noise(), target);
  }

  // required double ba_noise = 3;
  if (has_ba_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ba_noise(), target);
  }

  // required double bg_noise = 4;
  if (has_bg_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bg_noise(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.ImuNoiseParameter)
  return target;
}

int ImuNoiseParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double acc_noise = 1;
    if (has_acc_noise()) {
      total_size += 1 + 8;
    }

    // required double gyr_noise = 2;
    if (has_gyr_noise()) {
      total_size += 1 + 8;
    }

    // required double ba_noise = 3;
    if (has_ba_noise()) {
      total_size += 1 + 8;
    }

    // required double bg_noise = 4;
    if (has_bg_noise()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuNoiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImuNoiseParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImuNoiseParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImuNoiseParameter::MergeFrom(const ImuNoiseParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc_noise()) {
      set_acc_noise(from.acc_noise());
    }
    if (from.has_gyr_noise()) {
      set_gyr_noise(from.gyr_noise());
    }
    if (from.has_ba_noise()) {
      set_ba_noise(from.ba_noise());
    }
    if (from.has_bg_noise()) {
      set_bg_noise(from.bg_noise());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImuNoiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuNoiseParameter::CopyFrom(const ImuNoiseParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuNoiseParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ImuNoiseParameter::Swap(ImuNoiseParameter* other) {
  if (other != this) {
    std::swap(acc_noise_, other->acc_noise_);
    std::swap(gyr_noise_, other->gyr_noise_);
    std::swap(ba_noise_, other->ba_noise_);
    std::swap(bg_noise_, other->bg_noise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImuNoiseParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImuNoiseParameter_descriptor_;
  metadata.reflection = ImuNoiseParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraParam::kTypeFieldNumber;
const int CameraParam::kTicFieldNumber;
const int CameraParam::kFisheyeParamFieldNumber;
#endif  // !_MSC_VER

CameraParam::CameraParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.CameraParam)
}

void CameraParam::InitAsDefaultInstance() {
  fisheye_param_ = const_cast< ::hityavie::FisheyeCameraParam*>(&::hityavie::FisheyeCameraParam::default_instance());
}

CameraParam::CameraParam(const CameraParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hityavie.CameraParam)
}

void CameraParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fisheye_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraParam::~CameraParam() {
  // @@protoc_insertion_point(destructor:hityavie.CameraParam)
  SharedDtor();
}

void CameraParam::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete fisheye_param_;
  }
}

void CameraParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraParam_descriptor_;
}

const CameraParam& CameraParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_param_2eproto();
  return *default_instance_;
}

CameraParam* CameraParam::default_instance_ = NULL;

CameraParam* CameraParam::New() const {
  return new CameraParam;
}

void CameraParam::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_fisheye_param()) {
      if (fisheye_param_ != NULL) fisheye_param_->::hityavie::FisheyeCameraParam::Clear();
    }
  }
  tic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.CameraParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_tic;
        break;
      }

      // repeated double tic = 2;
      case 2: {
        if (tag == 17) {
         parse_tic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_tic())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_tic())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_tic;
        if (input->ExpectTag(26)) goto parse_fisheye_param;
        break;
      }

      // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
      case 3: {
        if (tag == 26) {
         parse_fisheye_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fisheye_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.CameraParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.CameraParam)
  return false;
#undef DO_
}

void CameraParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.CameraParam)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // repeated double tic = 2;
  for (int i = 0; i < this->tic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->tic(i), output);
  }

  // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
  if (has_fisheye_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fisheye_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.CameraParam)
}

::google::protobuf::uint8* CameraParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.CameraParam)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // repeated double tic = 2;
  for (int i = 0; i < this->tic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->tic(i), target);
  }

  // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
  if (has_fisheye_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fisheye_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.CameraParam)
  return target;
}

int CameraParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
    if (has_fisheye_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fisheye_param());
    }

  }
  // repeated double tic = 2;
  {
    int data_size = 0;
    data_size = 8 * this->tic_size();
    total_size += 1 * this->tic_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraParam::MergeFrom(const CameraParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  tic_.MergeFrom(from.tic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fisheye_param()) {
      mutable_fisheye_param()->::hityavie::FisheyeCameraParam::MergeFrom(from.fisheye_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParam::CopyFrom(const CameraParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_fisheye_param()) {
    if (!this->fisheye_param().IsInitialized()) return false;
  }
  return true;
}

void CameraParam::Swap(CameraParam* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    tic_.Swap(&other->tic_);
    std::swap(fisheye_param_, other->fisheye_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraParam_descriptor_;
  metadata.reflection = CameraParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FisheyeCameraParam::kFxFieldNumber;
const int FisheyeCameraParam::kFyFieldNumber;
const int FisheyeCameraParam::kCxFieldNumber;
const int FisheyeCameraParam::kCyFieldNumber;
const int FisheyeCameraParam::kDistFieldNumber;
const int FisheyeCameraParam::kWidthFieldNumber;
const int FisheyeCameraParam::kHeightFieldNumber;
#endif  // !_MSC_VER

FisheyeCameraParam::FisheyeCameraParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.FisheyeCameraParam)
}

void FisheyeCameraParam::InitAsDefaultInstance() {
}

FisheyeCameraParam::FisheyeCameraParam(const FisheyeCameraParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hityavie.FisheyeCameraParam)
}

void FisheyeCameraParam::SharedCtor() {
  _cached_size_ = 0;
  fx_ = 0;
  fy_ = 0;
  cx_ = 0;
  cy_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FisheyeCameraParam::~FisheyeCameraParam() {
  // @@protoc_insertion_point(destructor:hityavie.FisheyeCameraParam)
  SharedDtor();
}

void FisheyeCameraParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FisheyeCameraParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FisheyeCameraParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FisheyeCameraParam_descriptor_;
}

const FisheyeCameraParam& FisheyeCameraParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_param_2eproto();
  return *default_instance_;
}

FisheyeCameraParam* FisheyeCameraParam::default_instance_ = NULL;

FisheyeCameraParam* FisheyeCameraParam::New() const {
  return new FisheyeCameraParam;
}

void FisheyeCameraParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FisheyeCameraParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(fx_, cy_);
    ZR_(width_, height_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FisheyeCameraParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.FisheyeCameraParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double fx = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fx_)));
          set_has_fx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_fy;
        break;
      }

      // required double fy = 2;
      case 2: {
        if (tag == 17) {
         parse_fy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fy_)));
          set_has_fy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cx;
        break;
      }

      // required double cx = 3;
      case 3: {
        if (tag == 25) {
         parse_cx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cx_)));
          set_has_cx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_cy;
        break;
      }

      // required double cy = 4;
      case 4: {
        if (tag == 33) {
         parse_cy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cy_)));
          set_has_cy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_dist;
        break;
      }

      // repeated double dist = 5;
      case 5: {
        if (tag == 41) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_dist())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_dist;
        if (input->ExpectTag(48)) goto parse_width;
        break;
      }

      // required int32 width = 6;
      case 6: {
        if (tag == 48) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_height;
        break;
      }

      // required int32 height = 7;
      case 7: {
        if (tag == 56) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.FisheyeCameraParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.FisheyeCameraParam)
  return false;
#undef DO_
}

void FisheyeCameraParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.FisheyeCameraParam)
  // required double fx = 1;
  if (has_fx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->fx(), output);
  }

  // required double fy = 2;
  if (has_fy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fy(), output);
  }

  // required double cx = 3;
  if (has_cx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cx(), output);
  }

  // required double cy = 4;
  if (has_cy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cy(), output);
  }

  // repeated double dist = 5;
  for (int i = 0; i < this->dist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->dist(i), output);
  }

  // required int32 width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // required int32 height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.FisheyeCameraParam)
}

::google::protobuf::uint8* FisheyeCameraParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.FisheyeCameraParam)
  // required double fx = 1;
  if (has_fx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->fx(), target);
  }

  // required double fy = 2;
  if (has_fy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fy(), target);
  }

  // required double cx = 3;
  if (has_cx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cx(), target);
  }

  // required double cy = 4;
  if (has_cy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cy(), target);
  }

  // repeated double dist = 5;
  for (int i = 0; i < this->dist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->dist(i), target);
  }

  // required int32 width = 6;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // required int32 height = 7;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.FisheyeCameraParam)
  return target;
}

int FisheyeCameraParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double fx = 1;
    if (has_fx()) {
      total_size += 1 + 8;
    }

    // required double fy = 2;
    if (has_fy()) {
      total_size += 1 + 8;
    }

    // required double cx = 3;
    if (has_cx()) {
      total_size += 1 + 8;
    }

    // required double cy = 4;
    if (has_cy()) {
      total_size += 1 + 8;
    }

    // required int32 width = 6;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 7;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  // repeated double dist = 5;
  {
    int data_size = 0;
    data_size = 8 * this->dist_size();
    total_size += 1 * this->dist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FisheyeCameraParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FisheyeCameraParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FisheyeCameraParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FisheyeCameraParam::MergeFrom(const FisheyeCameraParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  dist_.MergeFrom(from.dist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fx()) {
      set_fx(from.fx());
    }
    if (from.has_fy()) {
      set_fy(from.fy());
    }
    if (from.has_cx()) {
      set_cx(from.cx());
    }
    if (from.has_cy()) {
      set_cy(from.cy());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FisheyeCameraParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FisheyeCameraParam::CopyFrom(const FisheyeCameraParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FisheyeCameraParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  return true;
}

void FisheyeCameraParam::Swap(FisheyeCameraParam* other) {
  if (other != this) {
    std::swap(fx_, other->fx_);
    std::swap(fy_, other->fy_);
    std::swap(cx_, other->cx_);
    std::swap(cy_, other->cy_);
    dist_.Swap(&other->dist_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FisheyeCameraParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FisheyeCameraParam_descriptor_;
  metadata.reflection = FisheyeCameraParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackerParam::kTypeFieldNumber;
const int TrackerParam::kOfParamFieldNumber;
#endif  // !_MSC_VER

TrackerParam::TrackerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.TrackerParam)
}

void TrackerParam::InitAsDefaultInstance() {
  of_param_ = const_cast< ::hityavie::OpticalflowTrackerParam*>(&::hityavie::OpticalflowTrackerParam::default_instance());
}

TrackerParam::TrackerParam(const TrackerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hityavie.TrackerParam)
}

void TrackerParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  of_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerParam::~TrackerParam() {
  // @@protoc_insertion_point(destructor:hityavie.TrackerParam)
  SharedDtor();
}

void TrackerParam::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete of_param_;
  }
}

void TrackerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerParam_descriptor_;
}

const TrackerParam& TrackerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_param_2eproto();
  return *default_instance_;
}

TrackerParam* TrackerParam::default_instance_ = NULL;

TrackerParam* TrackerParam::New() const {
  return new TrackerParam;
}

void TrackerParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_of_param()) {
      if (of_param_ != NULL) of_param_->::hityavie::OpticalflowTrackerParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.TrackerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_of_param;
        break;
      }

      // optional .hityavie.OpticalflowTrackerParam of_param = 2;
      case 2: {
        if (tag == 18) {
         parse_of_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_of_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.TrackerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.TrackerParam)
  return false;
#undef DO_
}

void TrackerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.TrackerParam)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional .hityavie.OpticalflowTrackerParam of_param = 2;
  if (has_of_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->of_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.TrackerParam)
}

::google::protobuf::uint8* TrackerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.TrackerParam)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional .hityavie.OpticalflowTrackerParam of_param = 2;
  if (has_of_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->of_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.TrackerParam)
  return target;
}

int TrackerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .hityavie.OpticalflowTrackerParam of_param = 2;
    if (has_of_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->of_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackerParam::MergeFrom(const TrackerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_of_param()) {
      mutable_of_param()->::hityavie::OpticalflowTrackerParam::MergeFrom(from.of_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerParam::CopyFrom(const TrackerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_of_param()) {
    if (!this->of_param().IsInitialized()) return false;
  }
  return true;
}

void TrackerParam::Swap(TrackerParam* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(of_param_, other->of_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerParam_descriptor_;
  metadata.reflection = TrackerParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpticalflowTrackerParam::kMinFeatNumFieldNumber;
const int OpticalflowTrackerParam::kNmsDistThreFieldNumber;
const int OpticalflowTrackerParam::kDetThreFieldNumber;
const int OpticalflowTrackerParam::kBdThreFieldNumber;
#endif  // !_MSC_VER

OpticalflowTrackerParam::OpticalflowTrackerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.OpticalflowTrackerParam)
}

void OpticalflowTrackerParam::InitAsDefaultInstance() {
}

OpticalflowTrackerParam::OpticalflowTrackerParam(const OpticalflowTrackerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hityavie.OpticalflowTrackerParam)
}

void OpticalflowTrackerParam::SharedCtor() {
  _cached_size_ = 0;
  min_feat_num_ = 0;
  nms_dist_thre_ = 0;
  det_thre_ = 0;
  bd_thre_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpticalflowTrackerParam::~OpticalflowTrackerParam() {
  // @@protoc_insertion_point(destructor:hityavie.OpticalflowTrackerParam)
  SharedDtor();
}

void OpticalflowTrackerParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpticalflowTrackerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpticalflowTrackerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpticalflowTrackerParam_descriptor_;
}

const OpticalflowTrackerParam& OpticalflowTrackerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_param_2eproto();
  return *default_instance_;
}

OpticalflowTrackerParam* OpticalflowTrackerParam::default_instance_ = NULL;

OpticalflowTrackerParam* OpticalflowTrackerParam::New() const {
  return new OpticalflowTrackerParam;
}

void OpticalflowTrackerParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpticalflowTrackerParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(nms_dist_thre_, bd_thre_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpticalflowTrackerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.OpticalflowTrackerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_feat_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_feat_num_)));
          set_has_min_feat_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_nms_dist_thre;
        break;
      }

      // required double nms_dist_thre = 2;
      case 2: {
        if (tag == 17) {
         parse_nms_dist_thre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nms_dist_thre_)));
          set_has_nms_dist_thre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_det_thre;
        break;
      }

      // required int32 det_thre = 3;
      case 3: {
        if (tag == 24) {
         parse_det_thre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &det_thre_)));
          set_has_det_thre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bd_thre;
        break;
      }

      // required double bd_thre = 4;
      case 4: {
        if (tag == 33) {
         parse_bd_thre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bd_thre_)));
          set_has_bd_thre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.OpticalflowTrackerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.OpticalflowTrackerParam)
  return false;
#undef DO_
}

void OpticalflowTrackerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.OpticalflowTrackerParam)
  // required int32 min_feat_num = 1;
  if (has_min_feat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_feat_num(), output);
  }

  // required double nms_dist_thre = 2;
  if (has_nms_dist_thre()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->nms_dist_thre(), output);
  }

  // required int32 det_thre = 3;
  if (has_det_thre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->det_thre(), output);
  }

  // required double bd_thre = 4;
  if (has_bd_thre()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bd_thre(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.OpticalflowTrackerParam)
}

::google::protobuf::uint8* OpticalflowTrackerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.OpticalflowTrackerParam)
  // required int32 min_feat_num = 1;
  if (has_min_feat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_feat_num(), target);
  }

  // required double nms_dist_thre = 2;
  if (has_nms_dist_thre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->nms_dist_thre(), target);
  }

  // required int32 det_thre = 3;
  if (has_det_thre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->det_thre(), target);
  }

  // required double bd_thre = 4;
  if (has_bd_thre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bd_thre(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.OpticalflowTrackerParam)
  return target;
}

int OpticalflowTrackerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min_feat_num = 1;
    if (has_min_feat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_feat_num());
    }

    // required double nms_dist_thre = 2;
    if (has_nms_dist_thre()) {
      total_size += 1 + 8;
    }

    // required int32 det_thre = 3;
    if (has_det_thre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->det_thre());
    }

    // required double bd_thre = 4;
    if (has_bd_thre()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticalflowTrackerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpticalflowTrackerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpticalflowTrackerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpticalflowTrackerParam::MergeFrom(const OpticalflowTrackerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_feat_num()) {
      set_min_feat_num(from.min_feat_num());
    }
    if (from.has_nms_dist_thre()) {
      set_nms_dist_thre(from.nms_dist_thre());
    }
    if (from.has_det_thre()) {
      set_det_thre(from.det_thre());
    }
    if (from.has_bd_thre()) {
      set_bd_thre(from.bd_thre());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpticalflowTrackerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticalflowTrackerParam::CopyFrom(const OpticalflowTrackerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalflowTrackerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void OpticalflowTrackerParam::Swap(OpticalflowTrackerParam* other) {
  if (other != this) {
    std::swap(min_feat_num_, other->min_feat_num_);
    std::swap(nms_dist_thre_, other->nms_dist_thre_);
    std::swap(det_thre_, other->det_thre_);
    std::swap(bd_thre_, other->bd_thre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpticalflowTrackerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpticalflowTrackerParam_descriptor_;
  metadata.reflection = OpticalflowTrackerParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SfmParam::kMinEffObsNumFieldNumber;
const int SfmParam::kMaxFrmIntervalFieldNumber;
const int SfmParam::kLocalWinSizeFieldNumber;
const int SfmParam::kMinTrackingFeatNumFieldNumber;
#endif  // !_MSC_VER

SfmParam::SfmParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.SfmParam)
}

void SfmParam::InitAsDefaultInstance() {
}

SfmParam::SfmParam(const SfmParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hityavie.SfmParam)
}

void SfmParam::SharedCtor() {
  _cached_size_ = 0;
  min_eff_obs_num_ = 0;
  max_frm_interval_ = 0;
  local_win_size_ = 0;
  min_tracking_feat_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SfmParam::~SfmParam() {
  // @@protoc_insertion_point(destructor:hityavie.SfmParam)
  SharedDtor();
}

void SfmParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SfmParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SfmParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SfmParam_descriptor_;
}

const SfmParam& SfmParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_param_2eproto();
  return *default_instance_;
}

SfmParam* SfmParam::default_instance_ = NULL;

SfmParam* SfmParam::New() const {
  return new SfmParam;
}

void SfmParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SfmParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_eff_obs_num_, min_tracking_feat_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SfmParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.SfmParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_eff_obs_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_eff_obs_num_)));
          set_has_min_eff_obs_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_frm_interval;
        break;
      }

      // required int32 max_frm_interval = 2;
      case 2: {
        if (tag == 16) {
         parse_max_frm_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_frm_interval_)));
          set_has_max_frm_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_local_win_size;
        break;
      }

      // required int32 local_win_size = 3;
      case 3: {
        if (tag == 24) {
         parse_local_win_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_win_size_)));
          set_has_local_win_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_tracking_feat_num;
        break;
      }

      // required int32 min_tracking_feat_num = 4;
      case 4: {
        if (tag == 32) {
         parse_min_tracking_feat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_tracking_feat_num_)));
          set_has_min_tracking_feat_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.SfmParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.SfmParam)
  return false;
#undef DO_
}

void SfmParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.SfmParam)
  // required int32 min_eff_obs_num = 1;
  if (has_min_eff_obs_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_eff_obs_num(), output);
  }

  // required int32 max_frm_interval = 2;
  if (has_max_frm_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_frm_interval(), output);
  }

  // required int32 local_win_size = 3;
  if (has_local_win_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->local_win_size(), output);
  }

  // required int32 min_tracking_feat_num = 4;
  if (has_min_tracking_feat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_tracking_feat_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.SfmParam)
}

::google::protobuf::uint8* SfmParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.SfmParam)
  // required int32 min_eff_obs_num = 1;
  if (has_min_eff_obs_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_eff_obs_num(), target);
  }

  // required int32 max_frm_interval = 2;
  if (has_max_frm_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_frm_interval(), target);
  }

  // required int32 local_win_size = 3;
  if (has_local_win_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->local_win_size(), target);
  }

  // required int32 min_tracking_feat_num = 4;
  if (has_min_tracking_feat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_tracking_feat_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.SfmParam)
  return target;
}

int SfmParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min_eff_obs_num = 1;
    if (has_min_eff_obs_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_eff_obs_num());
    }

    // required int32 max_frm_interval = 2;
    if (has_max_frm_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_frm_interval());
    }

    // required int32 local_win_size = 3;
    if (has_local_win_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_win_size());
    }

    // required int32 min_tracking_feat_num = 4;
    if (has_min_tracking_feat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_tracking_feat_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SfmParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SfmParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SfmParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SfmParam::MergeFrom(const SfmParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_eff_obs_num()) {
      set_min_eff_obs_num(from.min_eff_obs_num());
    }
    if (from.has_max_frm_interval()) {
      set_max_frm_interval(from.max_frm_interval());
    }
    if (from.has_local_win_size()) {
      set_local_win_size(from.local_win_size());
    }
    if (from.has_min_tracking_feat_num()) {
      set_min_tracking_feat_num(from.min_tracking_feat_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SfmParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SfmParam::CopyFrom(const SfmParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SfmParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SfmParam::Swap(SfmParam* other) {
  if (other != this) {
    std::swap(min_eff_obs_num_, other->min_eff_obs_num_);
    std::swap(max_frm_interval_, other->max_frm_interval_);
    std::swap(local_win_size_, other->local_win_size_);
    std::swap(min_tracking_feat_num_, other->min_tracking_feat_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SfmParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SfmParam_descriptor_;
  metadata.reflection = SfmParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hityavie

// @@protoc_insertion_point(global_scope)
