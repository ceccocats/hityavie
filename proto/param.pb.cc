// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param.proto

#include "param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace hityavie {
class YavieParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YavieParameter>
      _instance;
} _YavieParameter_default_instance_;
class ImuNoiseParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuNoiseParameter>
      _instance;
} _ImuNoiseParameter_default_instance_;
class CameraParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraParam>
      _instance;
} _CameraParam_default_instance_;
class FisheyeCameraParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FisheyeCameraParam>
      _instance;
} _FisheyeCameraParam_default_instance_;
class TrackerParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrackerParam>
      _instance;
} _TrackerParam_default_instance_;
class OpticalflowTrackerParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpticalflowTrackerParam>
      _instance;
} _OpticalflowTrackerParam_default_instance_;
class SfmParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SfmParam>
      _instance;
} _SfmParam_default_instance_;
}  // namespace hityavie
namespace protobuf_param_2eproto {
void InitDefaultsYavieParameterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_param_2eproto::InitDefaultsCameraParam();
  protobuf_param_2eproto::InitDefaultsImuNoiseParameter();
  protobuf_param_2eproto::InitDefaultsTrackerParam();
  protobuf_param_2eproto::InitDefaultsSfmParam();
  {
    void* ptr = &::hityavie::_YavieParameter_default_instance_;
    new (ptr) ::hityavie::YavieParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hityavie::YavieParameter::InitAsDefaultInstance();
}

void InitDefaultsYavieParameter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsYavieParameterImpl);
}

void InitDefaultsImuNoiseParameterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::hityavie::_ImuNoiseParameter_default_instance_;
    new (ptr) ::hityavie::ImuNoiseParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hityavie::ImuNoiseParameter::InitAsDefaultInstance();
}

void InitDefaultsImuNoiseParameter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImuNoiseParameterImpl);
}

void InitDefaultsCameraParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_param_2eproto::InitDefaultsFisheyeCameraParam();
  {
    void* ptr = &::hityavie::_CameraParam_default_instance_;
    new (ptr) ::hityavie::CameraParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hityavie::CameraParam::InitAsDefaultInstance();
}

void InitDefaultsCameraParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraParamImpl);
}

void InitDefaultsFisheyeCameraParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::hityavie::_FisheyeCameraParam_default_instance_;
    new (ptr) ::hityavie::FisheyeCameraParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hityavie::FisheyeCameraParam::InitAsDefaultInstance();
}

void InitDefaultsFisheyeCameraParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFisheyeCameraParamImpl);
}

void InitDefaultsTrackerParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_param_2eproto::InitDefaultsOpticalflowTrackerParam();
  {
    void* ptr = &::hityavie::_TrackerParam_default_instance_;
    new (ptr) ::hityavie::TrackerParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hityavie::TrackerParam::InitAsDefaultInstance();
}

void InitDefaultsTrackerParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrackerParamImpl);
}

void InitDefaultsOpticalflowTrackerParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::hityavie::_OpticalflowTrackerParam_default_instance_;
    new (ptr) ::hityavie::OpticalflowTrackerParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hityavie::OpticalflowTrackerParam::InitAsDefaultInstance();
}

void InitDefaultsOpticalflowTrackerParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOpticalflowTrackerParamImpl);
}

void InitDefaultsSfmParamImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::hityavie::_SfmParam_default_instance_;
    new (ptr) ::hityavie::SfmParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hityavie::SfmParam::InitAsDefaultInstance();
}

void InitDefaultsSfmParam() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSfmParamImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, cam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, np_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, tp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, sp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, gravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, min_eff_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, max_frm_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::YavieParameter, local_win_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::ImuNoiseParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::ImuNoiseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::ImuNoiseParameter, acc_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::ImuNoiseParameter, gyr_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::ImuNoiseParameter, ba_noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::ImuNoiseParameter, bg_noise_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::CameraParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::CameraParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::CameraParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::CameraParam, tic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::CameraParam, fisheye_param_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, fx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, fy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, cx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, cy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::FisheyeCameraParam, height_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::TrackerParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::TrackerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::TrackerParam, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::TrackerParam, of_param_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::OpticalflowTrackerParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::OpticalflowTrackerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::OpticalflowTrackerParam, min_feat_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::OpticalflowTrackerParam, nms_dist_thre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::OpticalflowTrackerParam, det_thre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::OpticalflowTrackerParam, bd_thre_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::SfmParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::SfmParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::SfmParam, min_eff_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::SfmParam, max_frm_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::SfmParam, local_win_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hityavie::SfmParam, min_tracking_feat_num_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::hityavie::YavieParameter)},
  { 21, 30, sizeof(::hityavie::ImuNoiseParameter)},
  { 34, 42, sizeof(::hityavie::CameraParam)},
  { 45, 57, sizeof(::hityavie::FisheyeCameraParam)},
  { 64, 71, sizeof(::hityavie::TrackerParam)},
  { 73, 82, sizeof(::hityavie::OpticalflowTrackerParam)},
  { 86, 95, sizeof(::hityavie::SfmParam)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hityavie::_YavieParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hityavie::_ImuNoiseParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hityavie::_CameraParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hityavie::_FisheyeCameraParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hityavie::_TrackerParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hityavie::_OpticalflowTrackerParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hityavie::_SfmParam_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "param.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013param.proto\022\010hityavie\"\375\001\n\016YavieParamet"
      "er\022\"\n\003cam\030\001 \002(\0132\025.hityavie.CameraParam\022\'"
      "\n\002np\030\002 \002(\0132\033.hityavie.ImuNoiseParameter\022"
      "\"\n\002tp\030\003 \002(\0132\026.hityavie.TrackerParam\022\036\n\002s"
      "p\030\004 \002(\0132\022.hityavie.SfmParam\022\017\n\007gravity\030\005"
      " \002(\001\022\027\n\017min_eff_obs_num\030\006 \002(\005\022\030\n\020max_frm"
      "_interval\030\007 \002(\005\022\026\n\016local_win_size\030\010 \002(\005\""
      "]\n\021ImuNoiseParameter\022\021\n\tacc_noise\030\001 \002(\001\022"
      "\021\n\tgyr_noise\030\002 \002(\001\022\020\n\010ba_noise\030\003 \002(\001\022\020\n\010"
      "bg_noise\030\004 \002(\001\"]\n\013CameraParam\022\014\n\004type\030\001 "
      "\002(\t\022\013\n\003tic\030\002 \003(\001\0223\n\rfisheye_param\030\003 \001(\0132"
      "\034.hityavie.FisheyeCameraParam\"q\n\022Fisheye"
      "CameraParam\022\n\n\002fx\030\001 \002(\001\022\n\n\002fy\030\002 \002(\001\022\n\n\002c"
      "x\030\003 \002(\001\022\n\n\002cy\030\004 \002(\001\022\014\n\004dist\030\005 \003(\001\022\r\n\005wid"
      "th\030\006 \002(\005\022\016\n\006height\030\007 \002(\005\"Q\n\014TrackerParam"
      "\022\014\n\004type\030\001 \002(\t\0223\n\010of_param\030\002 \001(\0132!.hitya"
      "vie.OpticalflowTrackerParam\"i\n\027Opticalfl"
      "owTrackerParam\022\024\n\014min_feat_num\030\001 \002(\005\022\025\n\r"
      "nms_dist_thre\030\002 \002(\001\022\020\n\010det_thre\030\003 \002(\005\022\017\n"
      "\007bd_thre\030\004 \002(\001\"t\n\010SfmParam\022\027\n\017min_eff_ob"
      "s_num\030\001 \002(\005\022\030\n\020max_frm_interval\030\002 \002(\005\022\026\n"
      "\016local_win_size\030\003 \002(\005\022\035\n\025min_tracking_fe"
      "at_num\030\004 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 892);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "param.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_param_2eproto
namespace hityavie {

// ===================================================================

void YavieParameter::InitAsDefaultInstance() {
  ::hityavie::_YavieParameter_default_instance_._instance.get_mutable()->cam_ = const_cast< ::hityavie::CameraParam*>(
      ::hityavie::CameraParam::internal_default_instance());
  ::hityavie::_YavieParameter_default_instance_._instance.get_mutable()->np_ = const_cast< ::hityavie::ImuNoiseParameter*>(
      ::hityavie::ImuNoiseParameter::internal_default_instance());
  ::hityavie::_YavieParameter_default_instance_._instance.get_mutable()->tp_ = const_cast< ::hityavie::TrackerParam*>(
      ::hityavie::TrackerParam::internal_default_instance());
  ::hityavie::_YavieParameter_default_instance_._instance.get_mutable()->sp_ = const_cast< ::hityavie::SfmParam*>(
      ::hityavie::SfmParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YavieParameter::kCamFieldNumber;
const int YavieParameter::kNpFieldNumber;
const int YavieParameter::kTpFieldNumber;
const int YavieParameter::kSpFieldNumber;
const int YavieParameter::kGravityFieldNumber;
const int YavieParameter::kMinEffObsNumFieldNumber;
const int YavieParameter::kMaxFrmIntervalFieldNumber;
const int YavieParameter::kLocalWinSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YavieParameter::YavieParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_param_2eproto::InitDefaultsYavieParameter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.YavieParameter)
}
YavieParameter::YavieParameter(const YavieParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cam()) {
    cam_ = new ::hityavie::CameraParam(*from.cam_);
  } else {
    cam_ = NULL;
  }
  if (from.has_np()) {
    np_ = new ::hityavie::ImuNoiseParameter(*from.np_);
  } else {
    np_ = NULL;
  }
  if (from.has_tp()) {
    tp_ = new ::hityavie::TrackerParam(*from.tp_);
  } else {
    tp_ = NULL;
  }
  if (from.has_sp()) {
    sp_ = new ::hityavie::SfmParam(*from.sp_);
  } else {
    sp_ = NULL;
  }
  ::memcpy(&gravity_, &from.gravity_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_win_size_) -
    reinterpret_cast<char*>(&gravity_)) + sizeof(local_win_size_));
  // @@protoc_insertion_point(copy_constructor:hityavie.YavieParameter)
}

void YavieParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cam_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_win_size_) -
      reinterpret_cast<char*>(&cam_)) + sizeof(local_win_size_));
}

YavieParameter::~YavieParameter() {
  // @@protoc_insertion_point(destructor:hityavie.YavieParameter)
  SharedDtor();
}

void YavieParameter::SharedDtor() {
  if (this != internal_default_instance()) delete cam_;
  if (this != internal_default_instance()) delete np_;
  if (this != internal_default_instance()) delete tp_;
  if (this != internal_default_instance()) delete sp_;
}

void YavieParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YavieParameter::descriptor() {
  ::protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YavieParameter& YavieParameter::default_instance() {
  ::protobuf_param_2eproto::InitDefaultsYavieParameter();
  return *internal_default_instance();
}

YavieParameter* YavieParameter::New(::google::protobuf::Arena* arena) const {
  YavieParameter* n = new YavieParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YavieParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:hityavie.YavieParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cam_ != NULL);
      cam_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(np_ != NULL);
      np_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tp_ != NULL);
      tp_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sp_ != NULL);
      sp_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&gravity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_win_size_) -
        reinterpret_cast<char*>(&gravity_)) + sizeof(local_win_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YavieParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.YavieParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .hityavie.CameraParam cam = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hityavie.ImuNoiseParameter np = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_np()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hityavie.TrackerParam tp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .hityavie.SfmParam sp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double gravity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_gravity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 min_eff_obs_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_min_eff_obs_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_eff_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_frm_interval = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_frm_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_frm_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 local_win_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_local_win_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_win_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.YavieParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.YavieParameter)
  return false;
#undef DO_
}

void YavieParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.YavieParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hityavie.CameraParam cam = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cam_, output);
  }

  // required .hityavie.ImuNoiseParameter np = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->np_, output);
  }

  // required .hityavie.TrackerParam tp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tp_, output);
  }

  // required .hityavie.SfmParam sp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sp_, output);
  }

  // required double gravity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gravity(), output);
  }

  // required int32 min_eff_obs_num = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->min_eff_obs_num(), output);
  }

  // required int32 max_frm_interval = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_frm_interval(), output);
  }

  // required int32 local_win_size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->local_win_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.YavieParameter)
}

::google::protobuf::uint8* YavieParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.YavieParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .hityavie.CameraParam cam = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->cam_, deterministic, target);
  }

  // required .hityavie.ImuNoiseParameter np = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->np_, deterministic, target);
  }

  // required .hityavie.TrackerParam tp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->tp_, deterministic, target);
  }

  // required .hityavie.SfmParam sp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->sp_, deterministic, target);
  }

  // required double gravity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gravity(), target);
  }

  // required int32 min_eff_obs_num = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->min_eff_obs_num(), target);
  }

  // required int32 max_frm_interval = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_frm_interval(), target);
  }

  // required int32 local_win_size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->local_win_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.YavieParameter)
  return target;
}

size_t YavieParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hityavie.YavieParameter)
  size_t total_size = 0;

  if (has_cam()) {
    // required .hityavie.CameraParam cam = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cam_);
  }

  if (has_np()) {
    // required .hityavie.ImuNoiseParameter np = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->np_);
  }

  if (has_tp()) {
    // required .hityavie.TrackerParam tp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tp_);
  }

  if (has_sp()) {
    // required .hityavie.SfmParam sp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sp_);
  }

  if (has_gravity()) {
    // required double gravity = 5;
    total_size += 1 + 8;
  }

  if (has_min_eff_obs_num()) {
    // required int32 min_eff_obs_num = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_eff_obs_num());
  }

  if (has_max_frm_interval()) {
    // required int32 max_frm_interval = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_frm_interval());
  }

  if (has_local_win_size()) {
    // required int32 local_win_size = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_win_size());
  }

  return total_size;
}
size_t YavieParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hityavie.YavieParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .hityavie.CameraParam cam = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cam_);

    // required .hityavie.ImuNoiseParameter np = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->np_);

    // required .hityavie.TrackerParam tp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tp_);

    // required .hityavie.SfmParam sp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sp_);

    // required double gravity = 5;
    total_size += 1 + 8;

    // required int32 min_eff_obs_num = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_eff_obs_num());

    // required int32 max_frm_interval = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_frm_interval());

    // required int32 local_win_size = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_win_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YavieParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hityavie.YavieParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const YavieParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YavieParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hityavie.YavieParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hityavie.YavieParameter)
    MergeFrom(*source);
  }
}

void YavieParameter::MergeFrom(const YavieParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hityavie.YavieParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cam()->::hityavie::CameraParam::MergeFrom(from.cam());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_np()->::hityavie::ImuNoiseParameter::MergeFrom(from.np());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tp()->::hityavie::TrackerParam::MergeFrom(from.tp());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_sp()->::hityavie::SfmParam::MergeFrom(from.sp());
    }
    if (cached_has_bits & 0x00000010u) {
      gravity_ = from.gravity_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_eff_obs_num_ = from.min_eff_obs_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_frm_interval_ = from.max_frm_interval_;
    }
    if (cached_has_bits & 0x00000080u) {
      local_win_size_ = from.local_win_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YavieParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hityavie.YavieParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YavieParameter::CopyFrom(const YavieParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hityavie.YavieParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YavieParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  if (has_cam()) {
    if (!this->cam_->IsInitialized()) return false;
  }
  if (has_np()) {
    if (!this->np_->IsInitialized()) return false;
  }
  if (has_tp()) {
    if (!this->tp_->IsInitialized()) return false;
  }
  if (has_sp()) {
    if (!this->sp_->IsInitialized()) return false;
  }
  return true;
}

void YavieParameter::Swap(YavieParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YavieParameter::InternalSwap(YavieParameter* other) {
  using std::swap;
  swap(cam_, other->cam_);
  swap(np_, other->np_);
  swap(tp_, other->tp_);
  swap(sp_, other->sp_);
  swap(gravity_, other->gravity_);
  swap(min_eff_obs_num_, other->min_eff_obs_num_);
  swap(max_frm_interval_, other->max_frm_interval_);
  swap(local_win_size_, other->local_win_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YavieParameter::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImuNoiseParameter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuNoiseParameter::kAccNoiseFieldNumber;
const int ImuNoiseParameter::kGyrNoiseFieldNumber;
const int ImuNoiseParameter::kBaNoiseFieldNumber;
const int ImuNoiseParameter::kBgNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuNoiseParameter::ImuNoiseParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_param_2eproto::InitDefaultsImuNoiseParameter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.ImuNoiseParameter)
}
ImuNoiseParameter::ImuNoiseParameter(const ImuNoiseParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_noise_, &from.acc_noise_,
    static_cast<size_t>(reinterpret_cast<char*>(&bg_noise_) -
    reinterpret_cast<char*>(&acc_noise_)) + sizeof(bg_noise_));
  // @@protoc_insertion_point(copy_constructor:hityavie.ImuNoiseParameter)
}

void ImuNoiseParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&acc_noise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bg_noise_) -
      reinterpret_cast<char*>(&acc_noise_)) + sizeof(bg_noise_));
}

ImuNoiseParameter::~ImuNoiseParameter() {
  // @@protoc_insertion_point(destructor:hityavie.ImuNoiseParameter)
  SharedDtor();
}

void ImuNoiseParameter::SharedDtor() {
}

void ImuNoiseParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuNoiseParameter::descriptor() {
  ::protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuNoiseParameter& ImuNoiseParameter::default_instance() {
  ::protobuf_param_2eproto::InitDefaultsImuNoiseParameter();
  return *internal_default_instance();
}

ImuNoiseParameter* ImuNoiseParameter::New(::google::protobuf::Arena* arena) const {
  ImuNoiseParameter* n = new ImuNoiseParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuNoiseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:hityavie.ImuNoiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&acc_noise_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bg_noise_) -
        reinterpret_cast<char*>(&acc_noise_)) + sizeof(bg_noise_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImuNoiseParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.ImuNoiseParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double acc_noise = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_acc_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double gyr_noise = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_gyr_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyr_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double ba_noise = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_ba_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ba_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bg_noise = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_bg_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bg_noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.ImuNoiseParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.ImuNoiseParameter)
  return false;
#undef DO_
}

void ImuNoiseParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.ImuNoiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double acc_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_noise(), output);
  }

  // required double gyr_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gyr_noise(), output);
  }

  // required double ba_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ba_noise(), output);
  }

  // required double bg_noise = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bg_noise(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.ImuNoiseParameter)
}

::google::protobuf::uint8* ImuNoiseParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.ImuNoiseParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double acc_noise = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_noise(), target);
  }

  // required double gyr_noise = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gyr_noise(), target);
  }

  // required double ba_noise = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ba_noise(), target);
  }

  // required double bg_noise = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bg_noise(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.ImuNoiseParameter)
  return target;
}

size_t ImuNoiseParameter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hityavie.ImuNoiseParameter)
  size_t total_size = 0;

  if (has_acc_noise()) {
    // required double acc_noise = 1;
    total_size += 1 + 8;
  }

  if (has_gyr_noise()) {
    // required double gyr_noise = 2;
    total_size += 1 + 8;
  }

  if (has_ba_noise()) {
    // required double ba_noise = 3;
    total_size += 1 + 8;
  }

  if (has_bg_noise()) {
    // required double bg_noise = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ImuNoiseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hityavie.ImuNoiseParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double acc_noise = 1;
    total_size += 1 + 8;

    // required double gyr_noise = 2;
    total_size += 1 + 8;

    // required double ba_noise = 3;
    total_size += 1 + 8;

    // required double bg_noise = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuNoiseParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hityavie.ImuNoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuNoiseParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuNoiseParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hityavie.ImuNoiseParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hityavie.ImuNoiseParameter)
    MergeFrom(*source);
  }
}

void ImuNoiseParameter::MergeFrom(const ImuNoiseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hityavie.ImuNoiseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      acc_noise_ = from.acc_noise_;
    }
    if (cached_has_bits & 0x00000002u) {
      gyr_noise_ = from.gyr_noise_;
    }
    if (cached_has_bits & 0x00000004u) {
      ba_noise_ = from.ba_noise_;
    }
    if (cached_has_bits & 0x00000008u) {
      bg_noise_ = from.bg_noise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImuNoiseParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hityavie.ImuNoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuNoiseParameter::CopyFrom(const ImuNoiseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hityavie.ImuNoiseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuNoiseParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ImuNoiseParameter::Swap(ImuNoiseParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuNoiseParameter::InternalSwap(ImuNoiseParameter* other) {
  using std::swap;
  swap(acc_noise_, other->acc_noise_);
  swap(gyr_noise_, other->gyr_noise_);
  swap(ba_noise_, other->ba_noise_);
  swap(bg_noise_, other->bg_noise_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuNoiseParameter::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraParam::InitAsDefaultInstance() {
  ::hityavie::_CameraParam_default_instance_._instance.get_mutable()->fisheye_param_ = const_cast< ::hityavie::FisheyeCameraParam*>(
      ::hityavie::FisheyeCameraParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraParam::kTypeFieldNumber;
const int CameraParam::kTicFieldNumber;
const int CameraParam::kFisheyeParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraParam::CameraParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_param_2eproto::InitDefaultsCameraParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.CameraParam)
}
CameraParam::CameraParam(const CameraParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tic_(from.tic_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_fisheye_param()) {
    fisheye_param_ = new ::hityavie::FisheyeCameraParam(*from.fisheye_param_);
  } else {
    fisheye_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hityavie.CameraParam)
}

void CameraParam::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fisheye_param_ = NULL;
}

CameraParam::~CameraParam() {
  // @@protoc_insertion_point(destructor:hityavie.CameraParam)
  SharedDtor();
}

void CameraParam::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fisheye_param_;
}

void CameraParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraParam::descriptor() {
  ::protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraParam& CameraParam::default_instance() {
  ::protobuf_param_2eproto::InitDefaultsCameraParam();
  return *internal_default_instance();
}

CameraParam* CameraParam::New(::google::protobuf::Arena* arena) const {
  CameraParam* n = new CameraParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraParam::Clear() {
// @@protoc_insertion_point(message_clear_start:hityavie.CameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tic_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fisheye_param_ != NULL);
      fisheye_param_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.CameraParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hityavie.CameraParam.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double tic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17u, input, this->mutable_tic())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_tic())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fisheye_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.CameraParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.CameraParam)
  return false;
#undef DO_
}

void CameraParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.CameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hityavie.CameraParam.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // repeated double tic = 2;
  for (int i = 0, n = this->tic_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->tic(i), output);
  }

  // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fisheye_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.CameraParam)
}

::google::protobuf::uint8* CameraParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.CameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hityavie.CameraParam.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // repeated double tic = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(2, this->tic_, target);

  // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->fisheye_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.CameraParam)
  return target;
}

size_t CameraParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hityavie.CameraParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }
  // repeated double tic = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tic_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tic_size());
    total_size += data_size;
  }

  // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
  if (has_fisheye_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fisheye_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hityavie.CameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hityavie.CameraParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hityavie.CameraParam)
    MergeFrom(*source);
  }
}

void CameraParam::MergeFrom(const CameraParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hityavie.CameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tic_.MergeFrom(from.tic_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fisheye_param()->::hityavie::FisheyeCameraParam::MergeFrom(from.fisheye_param());
    }
  }
}

void CameraParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hityavie.CameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraParam::CopyFrom(const CameraParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hityavie.CameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_fisheye_param()) {
    if (!this->fisheye_param_->IsInitialized()) return false;
  }
  return true;
}

void CameraParam::Swap(CameraParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraParam::InternalSwap(CameraParam* other) {
  using std::swap;
  tic_.InternalSwap(&other->tic_);
  type_.Swap(&other->type_);
  swap(fisheye_param_, other->fisheye_param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraParam::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FisheyeCameraParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FisheyeCameraParam::kFxFieldNumber;
const int FisheyeCameraParam::kFyFieldNumber;
const int FisheyeCameraParam::kCxFieldNumber;
const int FisheyeCameraParam::kCyFieldNumber;
const int FisheyeCameraParam::kDistFieldNumber;
const int FisheyeCameraParam::kWidthFieldNumber;
const int FisheyeCameraParam::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FisheyeCameraParam::FisheyeCameraParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_param_2eproto::InitDefaultsFisheyeCameraParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.FisheyeCameraParam)
}
FisheyeCameraParam::FisheyeCameraParam(const FisheyeCameraParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dist_(from.dist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:hityavie.FisheyeCameraParam)
}

void FisheyeCameraParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(height_));
}

FisheyeCameraParam::~FisheyeCameraParam() {
  // @@protoc_insertion_point(destructor:hityavie.FisheyeCameraParam)
  SharedDtor();
}

void FisheyeCameraParam::SharedDtor() {
}

void FisheyeCameraParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FisheyeCameraParam::descriptor() {
  ::protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FisheyeCameraParam& FisheyeCameraParam::default_instance() {
  ::protobuf_param_2eproto::InitDefaultsFisheyeCameraParam();
  return *internal_default_instance();
}

FisheyeCameraParam* FisheyeCameraParam::New(::google::protobuf::Arena* arena) const {
  FisheyeCameraParam* n = new FisheyeCameraParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FisheyeCameraParam::Clear() {
// @@protoc_insertion_point(message_clear_start:hityavie.FisheyeCameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&fx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&fx_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FisheyeCameraParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.FisheyeCameraParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double fx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_fx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double fy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_fy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_cx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double cy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_cy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_dist())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dist())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.FisheyeCameraParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.FisheyeCameraParam)
  return false;
#undef DO_
}

void FisheyeCameraParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.FisheyeCameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double fx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->fx(), output);
  }

  // required double fy = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fy(), output);
  }

  // required double cx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cx(), output);
  }

  // required double cy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cy(), output);
  }

  // repeated double dist = 5;
  for (int i = 0, n = this->dist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->dist(i), output);
  }

  // required int32 width = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // required int32 height = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.FisheyeCameraParam)
}

::google::protobuf::uint8* FisheyeCameraParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.FisheyeCameraParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double fx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->fx(), target);
  }

  // required double fy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fy(), target);
  }

  // required double cx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cx(), target);
  }

  // required double cy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cy(), target);
  }

  // repeated double dist = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->dist_, target);

  // required int32 width = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // required int32 height = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.FisheyeCameraParam)
  return target;
}

size_t FisheyeCameraParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hityavie.FisheyeCameraParam)
  size_t total_size = 0;

  if (has_fx()) {
    // required double fx = 1;
    total_size += 1 + 8;
  }

  if (has_fy()) {
    // required double fy = 2;
    total_size += 1 + 8;
  }

  if (has_cx()) {
    // required double cx = 3;
    total_size += 1 + 8;
  }

  if (has_cy()) {
    // required double cy = 4;
    total_size += 1 + 8;
  }

  if (has_width()) {
    // required int32 width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  return total_size;
}
size_t FisheyeCameraParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hityavie.FisheyeCameraParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double fx = 1;
    total_size += 1 + 8;

    // required double fy = 2;
    total_size += 1 + 8;

    // required double cx = 3;
    total_size += 1 + 8;

    // required double cy = 4;
    total_size += 1 + 8;

    // required int32 width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double dist = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->dist_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dist_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FisheyeCameraParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hityavie.FisheyeCameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FisheyeCameraParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FisheyeCameraParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hityavie.FisheyeCameraParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hityavie.FisheyeCameraParam)
    MergeFrom(*source);
  }
}

void FisheyeCameraParam::MergeFrom(const FisheyeCameraParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hityavie.FisheyeCameraParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dist_.MergeFrom(from.dist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      fx_ = from.fx_;
    }
    if (cached_has_bits & 0x00000002u) {
      fy_ = from.fy_;
    }
    if (cached_has_bits & 0x00000004u) {
      cx_ = from.cx_;
    }
    if (cached_has_bits & 0x00000008u) {
      cy_ = from.cy_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FisheyeCameraParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hityavie.FisheyeCameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FisheyeCameraParam::CopyFrom(const FisheyeCameraParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hityavie.FisheyeCameraParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FisheyeCameraParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void FisheyeCameraParam::Swap(FisheyeCameraParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FisheyeCameraParam::InternalSwap(FisheyeCameraParam* other) {
  using std::swap;
  dist_.InternalSwap(&other->dist_);
  swap(fx_, other->fx_);
  swap(fy_, other->fy_);
  swap(cx_, other->cx_);
  swap(cy_, other->cy_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FisheyeCameraParam::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrackerParam::InitAsDefaultInstance() {
  ::hityavie::_TrackerParam_default_instance_._instance.get_mutable()->of_param_ = const_cast< ::hityavie::OpticalflowTrackerParam*>(
      ::hityavie::OpticalflowTrackerParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerParam::kTypeFieldNumber;
const int TrackerParam::kOfParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerParam::TrackerParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_param_2eproto::InitDefaultsTrackerParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.TrackerParam)
}
TrackerParam::TrackerParam(const TrackerParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_of_param()) {
    of_param_ = new ::hityavie::OpticalflowTrackerParam(*from.of_param_);
  } else {
    of_param_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hityavie.TrackerParam)
}

void TrackerParam::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  of_param_ = NULL;
}

TrackerParam::~TrackerParam() {
  // @@protoc_insertion_point(destructor:hityavie.TrackerParam)
  SharedDtor();
}

void TrackerParam::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete of_param_;
}

void TrackerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerParam::descriptor() {
  ::protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackerParam& TrackerParam::default_instance() {
  ::protobuf_param_2eproto::InitDefaultsTrackerParam();
  return *internal_default_instance();
}

TrackerParam* TrackerParam::New(::google::protobuf::Arena* arena) const {
  TrackerParam* n = new TrackerParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:hityavie.TrackerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(of_param_ != NULL);
      of_param_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrackerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.TrackerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hityavie.TrackerParam.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hityavie.OpticalflowTrackerParam of_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_of_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.TrackerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.TrackerParam)
  return false;
#undef DO_
}

void TrackerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.TrackerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hityavie.TrackerParam.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional .hityavie.OpticalflowTrackerParam of_param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->of_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.TrackerParam)
}

::google::protobuf::uint8* TrackerParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.TrackerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hityavie.TrackerParam.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional .hityavie.OpticalflowTrackerParam of_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->of_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.TrackerParam)
  return target;
}

size_t TrackerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hityavie.TrackerParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }
  // optional .hityavie.OpticalflowTrackerParam of_param = 2;
  if (has_of_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->of_param_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hityavie.TrackerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackerParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackerParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hityavie.TrackerParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hityavie.TrackerParam)
    MergeFrom(*source);
  }
}

void TrackerParam::MergeFrom(const TrackerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hityavie.TrackerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_of_param()->::hityavie::OpticalflowTrackerParam::MergeFrom(from.of_param());
    }
  }
}

void TrackerParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hityavie.TrackerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerParam::CopyFrom(const TrackerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hityavie.TrackerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_of_param()) {
    if (!this->of_param_->IsInitialized()) return false;
  }
  return true;
}

void TrackerParam::Swap(TrackerParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackerParam::InternalSwap(TrackerParam* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(of_param_, other->of_param_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerParam::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpticalflowTrackerParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpticalflowTrackerParam::kMinFeatNumFieldNumber;
const int OpticalflowTrackerParam::kNmsDistThreFieldNumber;
const int OpticalflowTrackerParam::kDetThreFieldNumber;
const int OpticalflowTrackerParam::kBdThreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpticalflowTrackerParam::OpticalflowTrackerParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_param_2eproto::InitDefaultsOpticalflowTrackerParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.OpticalflowTrackerParam)
}
OpticalflowTrackerParam::OpticalflowTrackerParam(const OpticalflowTrackerParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nms_dist_thre_, &from.nms_dist_thre_,
    static_cast<size_t>(reinterpret_cast<char*>(&bd_thre_) -
    reinterpret_cast<char*>(&nms_dist_thre_)) + sizeof(bd_thre_));
  // @@protoc_insertion_point(copy_constructor:hityavie.OpticalflowTrackerParam)
}

void OpticalflowTrackerParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nms_dist_thre_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bd_thre_) -
      reinterpret_cast<char*>(&nms_dist_thre_)) + sizeof(bd_thre_));
}

OpticalflowTrackerParam::~OpticalflowTrackerParam() {
  // @@protoc_insertion_point(destructor:hityavie.OpticalflowTrackerParam)
  SharedDtor();
}

void OpticalflowTrackerParam::SharedDtor() {
}

void OpticalflowTrackerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpticalflowTrackerParam::descriptor() {
  ::protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpticalflowTrackerParam& OpticalflowTrackerParam::default_instance() {
  ::protobuf_param_2eproto::InitDefaultsOpticalflowTrackerParam();
  return *internal_default_instance();
}

OpticalflowTrackerParam* OpticalflowTrackerParam::New(::google::protobuf::Arena* arena) const {
  OpticalflowTrackerParam* n = new OpticalflowTrackerParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticalflowTrackerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:hityavie.OpticalflowTrackerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&nms_dist_thre_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bd_thre_) -
        reinterpret_cast<char*>(&nms_dist_thre_)) + sizeof(bd_thre_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpticalflowTrackerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.OpticalflowTrackerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_feat_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_feat_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_feat_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double nms_dist_thre = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_nms_dist_thre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nms_dist_thre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 det_thre = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_det_thre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &det_thre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bd_thre = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_bd_thre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bd_thre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.OpticalflowTrackerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.OpticalflowTrackerParam)
  return false;
#undef DO_
}

void OpticalflowTrackerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.OpticalflowTrackerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 min_feat_num = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_feat_num(), output);
  }

  // required double nms_dist_thre = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->nms_dist_thre(), output);
  }

  // required int32 det_thre = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->det_thre(), output);
  }

  // required double bd_thre = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bd_thre(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.OpticalflowTrackerParam)
}

::google::protobuf::uint8* OpticalflowTrackerParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.OpticalflowTrackerParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 min_feat_num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_feat_num(), target);
  }

  // required double nms_dist_thre = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->nms_dist_thre(), target);
  }

  // required int32 det_thre = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->det_thre(), target);
  }

  // required double bd_thre = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bd_thre(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.OpticalflowTrackerParam)
  return target;
}

size_t OpticalflowTrackerParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hityavie.OpticalflowTrackerParam)
  size_t total_size = 0;

  if (has_nms_dist_thre()) {
    // required double nms_dist_thre = 2;
    total_size += 1 + 8;
  }

  if (has_min_feat_num()) {
    // required int32 min_feat_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_feat_num());
  }

  if (has_det_thre()) {
    // required int32 det_thre = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->det_thre());
  }

  if (has_bd_thre()) {
    // required double bd_thre = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t OpticalflowTrackerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hityavie.OpticalflowTrackerParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double nms_dist_thre = 2;
    total_size += 1 + 8;

    // required int32 min_feat_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_feat_num());

    // required int32 det_thre = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->det_thre());

    // required double bd_thre = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticalflowTrackerParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hityavie.OpticalflowTrackerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OpticalflowTrackerParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpticalflowTrackerParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hityavie.OpticalflowTrackerParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hityavie.OpticalflowTrackerParam)
    MergeFrom(*source);
  }
}

void OpticalflowTrackerParam::MergeFrom(const OpticalflowTrackerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hityavie.OpticalflowTrackerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      nms_dist_thre_ = from.nms_dist_thre_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_feat_num_ = from.min_feat_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      det_thre_ = from.det_thre_;
    }
    if (cached_has_bits & 0x00000008u) {
      bd_thre_ = from.bd_thre_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpticalflowTrackerParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hityavie.OpticalflowTrackerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticalflowTrackerParam::CopyFrom(const OpticalflowTrackerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hityavie.OpticalflowTrackerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticalflowTrackerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void OpticalflowTrackerParam::Swap(OpticalflowTrackerParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticalflowTrackerParam::InternalSwap(OpticalflowTrackerParam* other) {
  using std::swap;
  swap(nms_dist_thre_, other->nms_dist_thre_);
  swap(min_feat_num_, other->min_feat_num_);
  swap(det_thre_, other->det_thre_);
  swap(bd_thre_, other->bd_thre_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpticalflowTrackerParam::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SfmParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SfmParam::kMinEffObsNumFieldNumber;
const int SfmParam::kMaxFrmIntervalFieldNumber;
const int SfmParam::kLocalWinSizeFieldNumber;
const int SfmParam::kMinTrackingFeatNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SfmParam::SfmParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_param_2eproto::InitDefaultsSfmParam();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:hityavie.SfmParam)
}
SfmParam::SfmParam(const SfmParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_eff_obs_num_, &from.min_eff_obs_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_tracking_feat_num_) -
    reinterpret_cast<char*>(&min_eff_obs_num_)) + sizeof(min_tracking_feat_num_));
  // @@protoc_insertion_point(copy_constructor:hityavie.SfmParam)
}

void SfmParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_eff_obs_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_tracking_feat_num_) -
      reinterpret_cast<char*>(&min_eff_obs_num_)) + sizeof(min_tracking_feat_num_));
}

SfmParam::~SfmParam() {
  // @@protoc_insertion_point(destructor:hityavie.SfmParam)
  SharedDtor();
}

void SfmParam::SharedDtor() {
}

void SfmParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SfmParam::descriptor() {
  ::protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SfmParam& SfmParam::default_instance() {
  ::protobuf_param_2eproto::InitDefaultsSfmParam();
  return *internal_default_instance();
}

SfmParam* SfmParam::New(::google::protobuf::Arena* arena) const {
  SfmParam* n = new SfmParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SfmParam::Clear() {
// @@protoc_insertion_point(message_clear_start:hityavie.SfmParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&min_eff_obs_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_tracking_feat_num_) -
        reinterpret_cast<char*>(&min_eff_obs_num_)) + sizeof(min_tracking_feat_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SfmParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hityavie.SfmParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_eff_obs_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_eff_obs_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_eff_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_frm_interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_frm_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_frm_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 local_win_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_local_win_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_win_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 min_tracking_feat_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_min_tracking_feat_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_tracking_feat_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hityavie.SfmParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hityavie.SfmParam)
  return false;
#undef DO_
}

void SfmParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hityavie.SfmParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 min_eff_obs_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_eff_obs_num(), output);
  }

  // required int32 max_frm_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_frm_interval(), output);
  }

  // required int32 local_win_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->local_win_size(), output);
  }

  // required int32 min_tracking_feat_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_tracking_feat_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hityavie.SfmParam)
}

::google::protobuf::uint8* SfmParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hityavie.SfmParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 min_eff_obs_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_eff_obs_num(), target);
  }

  // required int32 max_frm_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_frm_interval(), target);
  }

  // required int32 local_win_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->local_win_size(), target);
  }

  // required int32 min_tracking_feat_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_tracking_feat_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hityavie.SfmParam)
  return target;
}

size_t SfmParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hityavie.SfmParam)
  size_t total_size = 0;

  if (has_min_eff_obs_num()) {
    // required int32 min_eff_obs_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_eff_obs_num());
  }

  if (has_max_frm_interval()) {
    // required int32 max_frm_interval = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_frm_interval());
  }

  if (has_local_win_size()) {
    // required int32 local_win_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_win_size());
  }

  if (has_min_tracking_feat_num()) {
    // required int32 min_tracking_feat_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_tracking_feat_num());
  }

  return total_size;
}
size_t SfmParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hityavie.SfmParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 min_eff_obs_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_eff_obs_num());

    // required int32 max_frm_interval = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_frm_interval());

    // required int32 local_win_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_win_size());

    // required int32 min_tracking_feat_num = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_tracking_feat_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SfmParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hityavie.SfmParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SfmParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SfmParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hityavie.SfmParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hityavie.SfmParam)
    MergeFrom(*source);
  }
}

void SfmParam::MergeFrom(const SfmParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hityavie.SfmParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      min_eff_obs_num_ = from.min_eff_obs_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_frm_interval_ = from.max_frm_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      local_win_size_ = from.local_win_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_tracking_feat_num_ = from.min_tracking_feat_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SfmParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hityavie.SfmParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SfmParam::CopyFrom(const SfmParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hityavie.SfmParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SfmParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void SfmParam::Swap(SfmParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SfmParam::InternalSwap(SfmParam* other) {
  using std::swap;
  swap(min_eff_obs_num_, other->min_eff_obs_num_);
  swap(max_frm_interval_, other->max_frm_interval_);
  swap(local_win_size_, other->local_win_size_);
  swap(min_tracking_feat_num_, other->min_tracking_feat_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SfmParam::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hityavie

// @@protoc_insertion_point(global_scope)
