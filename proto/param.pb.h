// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param.proto

#ifndef PROTOBUF_param_2eproto__INCLUDED
#define PROTOBUF_param_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_param_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsYavieParameterImpl();
void InitDefaultsYavieParameter();
void InitDefaultsImuNoiseParameterImpl();
void InitDefaultsImuNoiseParameter();
void InitDefaultsCameraParamImpl();
void InitDefaultsCameraParam();
void InitDefaultsFisheyeCameraParamImpl();
void InitDefaultsFisheyeCameraParam();
void InitDefaultsTrackerParamImpl();
void InitDefaultsTrackerParam();
void InitDefaultsOpticalflowTrackerParamImpl();
void InitDefaultsOpticalflowTrackerParam();
void InitDefaultsSfmParamImpl();
void InitDefaultsSfmParam();
inline void InitDefaults() {
  InitDefaultsYavieParameter();
  InitDefaultsImuNoiseParameter();
  InitDefaultsCameraParam();
  InitDefaultsFisheyeCameraParam();
  InitDefaultsTrackerParam();
  InitDefaultsOpticalflowTrackerParam();
  InitDefaultsSfmParam();
}
}  // namespace protobuf_param_2eproto
namespace hityavie {
class CameraParam;
class CameraParamDefaultTypeInternal;
extern CameraParamDefaultTypeInternal _CameraParam_default_instance_;
class FisheyeCameraParam;
class FisheyeCameraParamDefaultTypeInternal;
extern FisheyeCameraParamDefaultTypeInternal _FisheyeCameraParam_default_instance_;
class ImuNoiseParameter;
class ImuNoiseParameterDefaultTypeInternal;
extern ImuNoiseParameterDefaultTypeInternal _ImuNoiseParameter_default_instance_;
class OpticalflowTrackerParam;
class OpticalflowTrackerParamDefaultTypeInternal;
extern OpticalflowTrackerParamDefaultTypeInternal _OpticalflowTrackerParam_default_instance_;
class SfmParam;
class SfmParamDefaultTypeInternal;
extern SfmParamDefaultTypeInternal _SfmParam_default_instance_;
class TrackerParam;
class TrackerParamDefaultTypeInternal;
extern TrackerParamDefaultTypeInternal _TrackerParam_default_instance_;
class YavieParameter;
class YavieParameterDefaultTypeInternal;
extern YavieParameterDefaultTypeInternal _YavieParameter_default_instance_;
}  // namespace hityavie
namespace hityavie {

// ===================================================================

class YavieParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hityavie.YavieParameter) */ {
 public:
  YavieParameter();
  virtual ~YavieParameter();

  YavieParameter(const YavieParameter& from);

  inline YavieParameter& operator=(const YavieParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YavieParameter(YavieParameter&& from) noexcept
    : YavieParameter() {
    *this = ::std::move(from);
  }

  inline YavieParameter& operator=(YavieParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YavieParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YavieParameter* internal_default_instance() {
    return reinterpret_cast<const YavieParameter*>(
               &_YavieParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(YavieParameter* other);
  friend void swap(YavieParameter& a, YavieParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YavieParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  YavieParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YavieParameter& from);
  void MergeFrom(const YavieParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YavieParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .hityavie.CameraParam cam = 1;
  bool has_cam() const;
  void clear_cam();
  static const int kCamFieldNumber = 1;
  const ::hityavie::CameraParam& cam() const;
  ::hityavie::CameraParam* release_cam();
  ::hityavie::CameraParam* mutable_cam();
  void set_allocated_cam(::hityavie::CameraParam* cam);

  // required .hityavie.ImuNoiseParameter np = 2;
  bool has_np() const;
  void clear_np();
  static const int kNpFieldNumber = 2;
  const ::hityavie::ImuNoiseParameter& np() const;
  ::hityavie::ImuNoiseParameter* release_np();
  ::hityavie::ImuNoiseParameter* mutable_np();
  void set_allocated_np(::hityavie::ImuNoiseParameter* np);

  // required .hityavie.TrackerParam tp = 3;
  bool has_tp() const;
  void clear_tp();
  static const int kTpFieldNumber = 3;
  const ::hityavie::TrackerParam& tp() const;
  ::hityavie::TrackerParam* release_tp();
  ::hityavie::TrackerParam* mutable_tp();
  void set_allocated_tp(::hityavie::TrackerParam* tp);

  // required .hityavie.SfmParam sp = 4;
  bool has_sp() const;
  void clear_sp();
  static const int kSpFieldNumber = 4;
  const ::hityavie::SfmParam& sp() const;
  ::hityavie::SfmParam* release_sp();
  ::hityavie::SfmParam* mutable_sp();
  void set_allocated_sp(::hityavie::SfmParam* sp);

  // required double gravity = 5;
  bool has_gravity() const;
  void clear_gravity();
  static const int kGravityFieldNumber = 5;
  double gravity() const;
  void set_gravity(double value);

  // required int32 min_eff_obs_num = 6;
  bool has_min_eff_obs_num() const;
  void clear_min_eff_obs_num();
  static const int kMinEffObsNumFieldNumber = 6;
  ::google::protobuf::int32 min_eff_obs_num() const;
  void set_min_eff_obs_num(::google::protobuf::int32 value);

  // required int32 max_frm_interval = 7;
  bool has_max_frm_interval() const;
  void clear_max_frm_interval();
  static const int kMaxFrmIntervalFieldNumber = 7;
  ::google::protobuf::int32 max_frm_interval() const;
  void set_max_frm_interval(::google::protobuf::int32 value);

  // required int32 local_win_size = 8;
  bool has_local_win_size() const;
  void clear_local_win_size();
  static const int kLocalWinSizeFieldNumber = 8;
  ::google::protobuf::int32 local_win_size() const;
  void set_local_win_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hityavie.YavieParameter)
 private:
  void set_has_cam();
  void clear_has_cam();
  void set_has_np();
  void clear_has_np();
  void set_has_tp();
  void clear_has_tp();
  void set_has_sp();
  void clear_has_sp();
  void set_has_gravity();
  void clear_has_gravity();
  void set_has_min_eff_obs_num();
  void clear_has_min_eff_obs_num();
  void set_has_max_frm_interval();
  void clear_has_max_frm_interval();
  void set_has_local_win_size();
  void clear_has_local_win_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::hityavie::CameraParam* cam_;
  ::hityavie::ImuNoiseParameter* np_;
  ::hityavie::TrackerParam* tp_;
  ::hityavie::SfmParam* sp_;
  double gravity_;
  ::google::protobuf::int32 min_eff_obs_num_;
  ::google::protobuf::int32 max_frm_interval_;
  ::google::protobuf::int32 local_win_size_;
  friend struct ::protobuf_param_2eproto::TableStruct;
  friend void ::protobuf_param_2eproto::InitDefaultsYavieParameterImpl();
};
// -------------------------------------------------------------------

class ImuNoiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hityavie.ImuNoiseParameter) */ {
 public:
  ImuNoiseParameter();
  virtual ~ImuNoiseParameter();

  ImuNoiseParameter(const ImuNoiseParameter& from);

  inline ImuNoiseParameter& operator=(const ImuNoiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImuNoiseParameter(ImuNoiseParameter&& from) noexcept
    : ImuNoiseParameter() {
    *this = ::std::move(from);
  }

  inline ImuNoiseParameter& operator=(ImuNoiseParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImuNoiseParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuNoiseParameter* internal_default_instance() {
    return reinterpret_cast<const ImuNoiseParameter*>(
               &_ImuNoiseParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ImuNoiseParameter* other);
  friend void swap(ImuNoiseParameter& a, ImuNoiseParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImuNoiseParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  ImuNoiseParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImuNoiseParameter& from);
  void MergeFrom(const ImuNoiseParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImuNoiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double acc_noise = 1;
  bool has_acc_noise() const;
  void clear_acc_noise();
  static const int kAccNoiseFieldNumber = 1;
  double acc_noise() const;
  void set_acc_noise(double value);

  // required double gyr_noise = 2;
  bool has_gyr_noise() const;
  void clear_gyr_noise();
  static const int kGyrNoiseFieldNumber = 2;
  double gyr_noise() const;
  void set_gyr_noise(double value);

  // required double ba_noise = 3;
  bool has_ba_noise() const;
  void clear_ba_noise();
  static const int kBaNoiseFieldNumber = 3;
  double ba_noise() const;
  void set_ba_noise(double value);

  // required double bg_noise = 4;
  bool has_bg_noise() const;
  void clear_bg_noise();
  static const int kBgNoiseFieldNumber = 4;
  double bg_noise() const;
  void set_bg_noise(double value);

  // @@protoc_insertion_point(class_scope:hityavie.ImuNoiseParameter)
 private:
  void set_has_acc_noise();
  void clear_has_acc_noise();
  void set_has_gyr_noise();
  void clear_has_gyr_noise();
  void set_has_ba_noise();
  void clear_has_ba_noise();
  void set_has_bg_noise();
  void clear_has_bg_noise();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double acc_noise_;
  double gyr_noise_;
  double ba_noise_;
  double bg_noise_;
  friend struct ::protobuf_param_2eproto::TableStruct;
  friend void ::protobuf_param_2eproto::InitDefaultsImuNoiseParameterImpl();
};
// -------------------------------------------------------------------

class CameraParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hityavie.CameraParam) */ {
 public:
  CameraParam();
  virtual ~CameraParam();

  CameraParam(const CameraParam& from);

  inline CameraParam& operator=(const CameraParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraParam(CameraParam&& from) noexcept
    : CameraParam() {
    *this = ::std::move(from);
  }

  inline CameraParam& operator=(CameraParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraParam* internal_default_instance() {
    return reinterpret_cast<const CameraParam*>(
               &_CameraParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CameraParam* other);
  friend void swap(CameraParam& a, CameraParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraParam* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraParam& from);
  void MergeFrom(const CameraParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double tic = 2;
  int tic_size() const;
  void clear_tic();
  static const int kTicFieldNumber = 2;
  double tic(int index) const;
  void set_tic(int index, double value);
  void add_tic(double value);
  const ::google::protobuf::RepeatedField< double >&
      tic() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_tic();

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .hityavie.FisheyeCameraParam fisheye_param = 3;
  bool has_fisheye_param() const;
  void clear_fisheye_param();
  static const int kFisheyeParamFieldNumber = 3;
  const ::hityavie::FisheyeCameraParam& fisheye_param() const;
  ::hityavie::FisheyeCameraParam* release_fisheye_param();
  ::hityavie::FisheyeCameraParam* mutable_fisheye_param();
  void set_allocated_fisheye_param(::hityavie::FisheyeCameraParam* fisheye_param);

  // @@protoc_insertion_point(class_scope:hityavie.CameraParam)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_fisheye_param();
  void clear_has_fisheye_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > tic_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::hityavie::FisheyeCameraParam* fisheye_param_;
  friend struct ::protobuf_param_2eproto::TableStruct;
  friend void ::protobuf_param_2eproto::InitDefaultsCameraParamImpl();
};
// -------------------------------------------------------------------

class FisheyeCameraParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hityavie.FisheyeCameraParam) */ {
 public:
  FisheyeCameraParam();
  virtual ~FisheyeCameraParam();

  FisheyeCameraParam(const FisheyeCameraParam& from);

  inline FisheyeCameraParam& operator=(const FisheyeCameraParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FisheyeCameraParam(FisheyeCameraParam&& from) noexcept
    : FisheyeCameraParam() {
    *this = ::std::move(from);
  }

  inline FisheyeCameraParam& operator=(FisheyeCameraParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FisheyeCameraParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FisheyeCameraParam* internal_default_instance() {
    return reinterpret_cast<const FisheyeCameraParam*>(
               &_FisheyeCameraParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FisheyeCameraParam* other);
  friend void swap(FisheyeCameraParam& a, FisheyeCameraParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FisheyeCameraParam* New() const PROTOBUF_FINAL { return New(NULL); }

  FisheyeCameraParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FisheyeCameraParam& from);
  void MergeFrom(const FisheyeCameraParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FisheyeCameraParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double dist = 5;
  int dist_size() const;
  void clear_dist();
  static const int kDistFieldNumber = 5;
  double dist(int index) const;
  void set_dist(int index, double value);
  void add_dist(double value);
  const ::google::protobuf::RepeatedField< double >&
      dist() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_dist();

  // required double fx = 1;
  bool has_fx() const;
  void clear_fx();
  static const int kFxFieldNumber = 1;
  double fx() const;
  void set_fx(double value);

  // required double fy = 2;
  bool has_fy() const;
  void clear_fy();
  static const int kFyFieldNumber = 2;
  double fy() const;
  void set_fy(double value);

  // required double cx = 3;
  bool has_cx() const;
  void clear_cx();
  static const int kCxFieldNumber = 3;
  double cx() const;
  void set_cx(double value);

  // required double cy = 4;
  bool has_cy() const;
  void clear_cy();
  static const int kCyFieldNumber = 4;
  double cy() const;
  void set_cy(double value);

  // required int32 width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hityavie.FisheyeCameraParam)
 private:
  void set_has_fx();
  void clear_has_fx();
  void set_has_fy();
  void clear_has_fy();
  void set_has_cx();
  void clear_has_cx();
  void set_has_cy();
  void clear_has_cy();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > dist_;
  double fx_;
  double fy_;
  double cx_;
  double cy_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend struct ::protobuf_param_2eproto::TableStruct;
  friend void ::protobuf_param_2eproto::InitDefaultsFisheyeCameraParamImpl();
};
// -------------------------------------------------------------------

class TrackerParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hityavie.TrackerParam) */ {
 public:
  TrackerParam();
  virtual ~TrackerParam();

  TrackerParam(const TrackerParam& from);

  inline TrackerParam& operator=(const TrackerParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackerParam(TrackerParam&& from) noexcept
    : TrackerParam() {
    *this = ::std::move(from);
  }

  inline TrackerParam& operator=(TrackerParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackerParam* internal_default_instance() {
    return reinterpret_cast<const TrackerParam*>(
               &_TrackerParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TrackerParam* other);
  friend void swap(TrackerParam& a, TrackerParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackerParam* New() const PROTOBUF_FINAL { return New(NULL); }

  TrackerParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrackerParam& from);
  void MergeFrom(const TrackerParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrackerParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .hityavie.OpticalflowTrackerParam of_param = 2;
  bool has_of_param() const;
  void clear_of_param();
  static const int kOfParamFieldNumber = 2;
  const ::hityavie::OpticalflowTrackerParam& of_param() const;
  ::hityavie::OpticalflowTrackerParam* release_of_param();
  ::hityavie::OpticalflowTrackerParam* mutable_of_param();
  void set_allocated_of_param(::hityavie::OpticalflowTrackerParam* of_param);

  // @@protoc_insertion_point(class_scope:hityavie.TrackerParam)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_of_param();
  void clear_has_of_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::hityavie::OpticalflowTrackerParam* of_param_;
  friend struct ::protobuf_param_2eproto::TableStruct;
  friend void ::protobuf_param_2eproto::InitDefaultsTrackerParamImpl();
};
// -------------------------------------------------------------------

class OpticalflowTrackerParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hityavie.OpticalflowTrackerParam) */ {
 public:
  OpticalflowTrackerParam();
  virtual ~OpticalflowTrackerParam();

  OpticalflowTrackerParam(const OpticalflowTrackerParam& from);

  inline OpticalflowTrackerParam& operator=(const OpticalflowTrackerParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpticalflowTrackerParam(OpticalflowTrackerParam&& from) noexcept
    : OpticalflowTrackerParam() {
    *this = ::std::move(from);
  }

  inline OpticalflowTrackerParam& operator=(OpticalflowTrackerParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpticalflowTrackerParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpticalflowTrackerParam* internal_default_instance() {
    return reinterpret_cast<const OpticalflowTrackerParam*>(
               &_OpticalflowTrackerParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(OpticalflowTrackerParam* other);
  friend void swap(OpticalflowTrackerParam& a, OpticalflowTrackerParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpticalflowTrackerParam* New() const PROTOBUF_FINAL { return New(NULL); }

  OpticalflowTrackerParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OpticalflowTrackerParam& from);
  void MergeFrom(const OpticalflowTrackerParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OpticalflowTrackerParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double nms_dist_thre = 2;
  bool has_nms_dist_thre() const;
  void clear_nms_dist_thre();
  static const int kNmsDistThreFieldNumber = 2;
  double nms_dist_thre() const;
  void set_nms_dist_thre(double value);

  // required int32 min_feat_num = 1;
  bool has_min_feat_num() const;
  void clear_min_feat_num();
  static const int kMinFeatNumFieldNumber = 1;
  ::google::protobuf::int32 min_feat_num() const;
  void set_min_feat_num(::google::protobuf::int32 value);

  // required int32 det_thre = 3;
  bool has_det_thre() const;
  void clear_det_thre();
  static const int kDetThreFieldNumber = 3;
  ::google::protobuf::int32 det_thre() const;
  void set_det_thre(::google::protobuf::int32 value);

  // required double bd_thre = 4;
  bool has_bd_thre() const;
  void clear_bd_thre();
  static const int kBdThreFieldNumber = 4;
  double bd_thre() const;
  void set_bd_thre(double value);

  // @@protoc_insertion_point(class_scope:hityavie.OpticalflowTrackerParam)
 private:
  void set_has_min_feat_num();
  void clear_has_min_feat_num();
  void set_has_nms_dist_thre();
  void clear_has_nms_dist_thre();
  void set_has_det_thre();
  void clear_has_det_thre();
  void set_has_bd_thre();
  void clear_has_bd_thre();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double nms_dist_thre_;
  ::google::protobuf::int32 min_feat_num_;
  ::google::protobuf::int32 det_thre_;
  double bd_thre_;
  friend struct ::protobuf_param_2eproto::TableStruct;
  friend void ::protobuf_param_2eproto::InitDefaultsOpticalflowTrackerParamImpl();
};
// -------------------------------------------------------------------

class SfmParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hityavie.SfmParam) */ {
 public:
  SfmParam();
  virtual ~SfmParam();

  SfmParam(const SfmParam& from);

  inline SfmParam& operator=(const SfmParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SfmParam(SfmParam&& from) noexcept
    : SfmParam() {
    *this = ::std::move(from);
  }

  inline SfmParam& operator=(SfmParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SfmParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SfmParam* internal_default_instance() {
    return reinterpret_cast<const SfmParam*>(
               &_SfmParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SfmParam* other);
  friend void swap(SfmParam& a, SfmParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SfmParam* New() const PROTOBUF_FINAL { return New(NULL); }

  SfmParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SfmParam& from);
  void MergeFrom(const SfmParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SfmParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 min_eff_obs_num = 1;
  bool has_min_eff_obs_num() const;
  void clear_min_eff_obs_num();
  static const int kMinEffObsNumFieldNumber = 1;
  ::google::protobuf::int32 min_eff_obs_num() const;
  void set_min_eff_obs_num(::google::protobuf::int32 value);

  // required int32 max_frm_interval = 2;
  bool has_max_frm_interval() const;
  void clear_max_frm_interval();
  static const int kMaxFrmIntervalFieldNumber = 2;
  ::google::protobuf::int32 max_frm_interval() const;
  void set_max_frm_interval(::google::protobuf::int32 value);

  // required int32 local_win_size = 3;
  bool has_local_win_size() const;
  void clear_local_win_size();
  static const int kLocalWinSizeFieldNumber = 3;
  ::google::protobuf::int32 local_win_size() const;
  void set_local_win_size(::google::protobuf::int32 value);

  // required int32 min_tracking_feat_num = 4;
  bool has_min_tracking_feat_num() const;
  void clear_min_tracking_feat_num();
  static const int kMinTrackingFeatNumFieldNumber = 4;
  ::google::protobuf::int32 min_tracking_feat_num() const;
  void set_min_tracking_feat_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hityavie.SfmParam)
 private:
  void set_has_min_eff_obs_num();
  void clear_has_min_eff_obs_num();
  void set_has_max_frm_interval();
  void clear_has_max_frm_interval();
  void set_has_local_win_size();
  void clear_has_local_win_size();
  void set_has_min_tracking_feat_num();
  void clear_has_min_tracking_feat_num();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 min_eff_obs_num_;
  ::google::protobuf::int32 max_frm_interval_;
  ::google::protobuf::int32 local_win_size_;
  ::google::protobuf::int32 min_tracking_feat_num_;
  friend struct ::protobuf_param_2eproto::TableStruct;
  friend void ::protobuf_param_2eproto::InitDefaultsSfmParamImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// YavieParameter

// required .hityavie.CameraParam cam = 1;
inline bool YavieParameter::has_cam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YavieParameter::set_has_cam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YavieParameter::clear_has_cam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YavieParameter::clear_cam() {
  if (cam_ != NULL) cam_->Clear();
  clear_has_cam();
}
inline const ::hityavie::CameraParam& YavieParameter::cam() const {
  const ::hityavie::CameraParam* p = cam_;
  // @@protoc_insertion_point(field_get:hityavie.YavieParameter.cam)
  return p != NULL ? *p : *reinterpret_cast<const ::hityavie::CameraParam*>(
      &::hityavie::_CameraParam_default_instance_);
}
inline ::hityavie::CameraParam* YavieParameter::release_cam() {
  // @@protoc_insertion_point(field_release:hityavie.YavieParameter.cam)
  clear_has_cam();
  ::hityavie::CameraParam* temp = cam_;
  cam_ = NULL;
  return temp;
}
inline ::hityavie::CameraParam* YavieParameter::mutable_cam() {
  set_has_cam();
  if (cam_ == NULL) {
    cam_ = new ::hityavie::CameraParam;
  }
  // @@protoc_insertion_point(field_mutable:hityavie.YavieParameter.cam)
  return cam_;
}
inline void YavieParameter::set_allocated_cam(::hityavie::CameraParam* cam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cam_;
  }
  if (cam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cam, submessage_arena);
    }
    set_has_cam();
  } else {
    clear_has_cam();
  }
  cam_ = cam;
  // @@protoc_insertion_point(field_set_allocated:hityavie.YavieParameter.cam)
}

// required .hityavie.ImuNoiseParameter np = 2;
inline bool YavieParameter::has_np() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YavieParameter::set_has_np() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YavieParameter::clear_has_np() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YavieParameter::clear_np() {
  if (np_ != NULL) np_->Clear();
  clear_has_np();
}
inline const ::hityavie::ImuNoiseParameter& YavieParameter::np() const {
  const ::hityavie::ImuNoiseParameter* p = np_;
  // @@protoc_insertion_point(field_get:hityavie.YavieParameter.np)
  return p != NULL ? *p : *reinterpret_cast<const ::hityavie::ImuNoiseParameter*>(
      &::hityavie::_ImuNoiseParameter_default_instance_);
}
inline ::hityavie::ImuNoiseParameter* YavieParameter::release_np() {
  // @@protoc_insertion_point(field_release:hityavie.YavieParameter.np)
  clear_has_np();
  ::hityavie::ImuNoiseParameter* temp = np_;
  np_ = NULL;
  return temp;
}
inline ::hityavie::ImuNoiseParameter* YavieParameter::mutable_np() {
  set_has_np();
  if (np_ == NULL) {
    np_ = new ::hityavie::ImuNoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:hityavie.YavieParameter.np)
  return np_;
}
inline void YavieParameter::set_allocated_np(::hityavie::ImuNoiseParameter* np) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete np_;
  }
  if (np) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      np = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, np, submessage_arena);
    }
    set_has_np();
  } else {
    clear_has_np();
  }
  np_ = np;
  // @@protoc_insertion_point(field_set_allocated:hityavie.YavieParameter.np)
}

// required .hityavie.TrackerParam tp = 3;
inline bool YavieParameter::has_tp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YavieParameter::set_has_tp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YavieParameter::clear_has_tp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YavieParameter::clear_tp() {
  if (tp_ != NULL) tp_->Clear();
  clear_has_tp();
}
inline const ::hityavie::TrackerParam& YavieParameter::tp() const {
  const ::hityavie::TrackerParam* p = tp_;
  // @@protoc_insertion_point(field_get:hityavie.YavieParameter.tp)
  return p != NULL ? *p : *reinterpret_cast<const ::hityavie::TrackerParam*>(
      &::hityavie::_TrackerParam_default_instance_);
}
inline ::hityavie::TrackerParam* YavieParameter::release_tp() {
  // @@protoc_insertion_point(field_release:hityavie.YavieParameter.tp)
  clear_has_tp();
  ::hityavie::TrackerParam* temp = tp_;
  tp_ = NULL;
  return temp;
}
inline ::hityavie::TrackerParam* YavieParameter::mutable_tp() {
  set_has_tp();
  if (tp_ == NULL) {
    tp_ = new ::hityavie::TrackerParam;
  }
  // @@protoc_insertion_point(field_mutable:hityavie.YavieParameter.tp)
  return tp_;
}
inline void YavieParameter::set_allocated_tp(::hityavie::TrackerParam* tp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tp_;
  }
  if (tp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tp, submessage_arena);
    }
    set_has_tp();
  } else {
    clear_has_tp();
  }
  tp_ = tp;
  // @@protoc_insertion_point(field_set_allocated:hityavie.YavieParameter.tp)
}

// required .hityavie.SfmParam sp = 4;
inline bool YavieParameter::has_sp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YavieParameter::set_has_sp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YavieParameter::clear_has_sp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YavieParameter::clear_sp() {
  if (sp_ != NULL) sp_->Clear();
  clear_has_sp();
}
inline const ::hityavie::SfmParam& YavieParameter::sp() const {
  const ::hityavie::SfmParam* p = sp_;
  // @@protoc_insertion_point(field_get:hityavie.YavieParameter.sp)
  return p != NULL ? *p : *reinterpret_cast<const ::hityavie::SfmParam*>(
      &::hityavie::_SfmParam_default_instance_);
}
inline ::hityavie::SfmParam* YavieParameter::release_sp() {
  // @@protoc_insertion_point(field_release:hityavie.YavieParameter.sp)
  clear_has_sp();
  ::hityavie::SfmParam* temp = sp_;
  sp_ = NULL;
  return temp;
}
inline ::hityavie::SfmParam* YavieParameter::mutable_sp() {
  set_has_sp();
  if (sp_ == NULL) {
    sp_ = new ::hityavie::SfmParam;
  }
  // @@protoc_insertion_point(field_mutable:hityavie.YavieParameter.sp)
  return sp_;
}
inline void YavieParameter::set_allocated_sp(::hityavie::SfmParam* sp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sp_;
  }
  if (sp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sp, submessage_arena);
    }
    set_has_sp();
  } else {
    clear_has_sp();
  }
  sp_ = sp;
  // @@protoc_insertion_point(field_set_allocated:hityavie.YavieParameter.sp)
}

// required double gravity = 5;
inline bool YavieParameter::has_gravity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YavieParameter::set_has_gravity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YavieParameter::clear_has_gravity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YavieParameter::clear_gravity() {
  gravity_ = 0;
  clear_has_gravity();
}
inline double YavieParameter::gravity() const {
  // @@protoc_insertion_point(field_get:hityavie.YavieParameter.gravity)
  return gravity_;
}
inline void YavieParameter::set_gravity(double value) {
  set_has_gravity();
  gravity_ = value;
  // @@protoc_insertion_point(field_set:hityavie.YavieParameter.gravity)
}

// required int32 min_eff_obs_num = 6;
inline bool YavieParameter::has_min_eff_obs_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YavieParameter::set_has_min_eff_obs_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YavieParameter::clear_has_min_eff_obs_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YavieParameter::clear_min_eff_obs_num() {
  min_eff_obs_num_ = 0;
  clear_has_min_eff_obs_num();
}
inline ::google::protobuf::int32 YavieParameter::min_eff_obs_num() const {
  // @@protoc_insertion_point(field_get:hityavie.YavieParameter.min_eff_obs_num)
  return min_eff_obs_num_;
}
inline void YavieParameter::set_min_eff_obs_num(::google::protobuf::int32 value) {
  set_has_min_eff_obs_num();
  min_eff_obs_num_ = value;
  // @@protoc_insertion_point(field_set:hityavie.YavieParameter.min_eff_obs_num)
}

// required int32 max_frm_interval = 7;
inline bool YavieParameter::has_max_frm_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YavieParameter::set_has_max_frm_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YavieParameter::clear_has_max_frm_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YavieParameter::clear_max_frm_interval() {
  max_frm_interval_ = 0;
  clear_has_max_frm_interval();
}
inline ::google::protobuf::int32 YavieParameter::max_frm_interval() const {
  // @@protoc_insertion_point(field_get:hityavie.YavieParameter.max_frm_interval)
  return max_frm_interval_;
}
inline void YavieParameter::set_max_frm_interval(::google::protobuf::int32 value) {
  set_has_max_frm_interval();
  max_frm_interval_ = value;
  // @@protoc_insertion_point(field_set:hityavie.YavieParameter.max_frm_interval)
}

// required int32 local_win_size = 8;
inline bool YavieParameter::has_local_win_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YavieParameter::set_has_local_win_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YavieParameter::clear_has_local_win_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YavieParameter::clear_local_win_size() {
  local_win_size_ = 0;
  clear_has_local_win_size();
}
inline ::google::protobuf::int32 YavieParameter::local_win_size() const {
  // @@protoc_insertion_point(field_get:hityavie.YavieParameter.local_win_size)
  return local_win_size_;
}
inline void YavieParameter::set_local_win_size(::google::protobuf::int32 value) {
  set_has_local_win_size();
  local_win_size_ = value;
  // @@protoc_insertion_point(field_set:hityavie.YavieParameter.local_win_size)
}

// -------------------------------------------------------------------

// ImuNoiseParameter

// required double acc_noise = 1;
inline bool ImuNoiseParameter::has_acc_noise() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImuNoiseParameter::set_has_acc_noise() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImuNoiseParameter::clear_has_acc_noise() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImuNoiseParameter::clear_acc_noise() {
  acc_noise_ = 0;
  clear_has_acc_noise();
}
inline double ImuNoiseParameter::acc_noise() const {
  // @@protoc_insertion_point(field_get:hityavie.ImuNoiseParameter.acc_noise)
  return acc_noise_;
}
inline void ImuNoiseParameter::set_acc_noise(double value) {
  set_has_acc_noise();
  acc_noise_ = value;
  // @@protoc_insertion_point(field_set:hityavie.ImuNoiseParameter.acc_noise)
}

// required double gyr_noise = 2;
inline bool ImuNoiseParameter::has_gyr_noise() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImuNoiseParameter::set_has_gyr_noise() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImuNoiseParameter::clear_has_gyr_noise() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImuNoiseParameter::clear_gyr_noise() {
  gyr_noise_ = 0;
  clear_has_gyr_noise();
}
inline double ImuNoiseParameter::gyr_noise() const {
  // @@protoc_insertion_point(field_get:hityavie.ImuNoiseParameter.gyr_noise)
  return gyr_noise_;
}
inline void ImuNoiseParameter::set_gyr_noise(double value) {
  set_has_gyr_noise();
  gyr_noise_ = value;
  // @@protoc_insertion_point(field_set:hityavie.ImuNoiseParameter.gyr_noise)
}

// required double ba_noise = 3;
inline bool ImuNoiseParameter::has_ba_noise() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImuNoiseParameter::set_has_ba_noise() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImuNoiseParameter::clear_has_ba_noise() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImuNoiseParameter::clear_ba_noise() {
  ba_noise_ = 0;
  clear_has_ba_noise();
}
inline double ImuNoiseParameter::ba_noise() const {
  // @@protoc_insertion_point(field_get:hityavie.ImuNoiseParameter.ba_noise)
  return ba_noise_;
}
inline void ImuNoiseParameter::set_ba_noise(double value) {
  set_has_ba_noise();
  ba_noise_ = value;
  // @@protoc_insertion_point(field_set:hityavie.ImuNoiseParameter.ba_noise)
}

// required double bg_noise = 4;
inline bool ImuNoiseParameter::has_bg_noise() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImuNoiseParameter::set_has_bg_noise() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImuNoiseParameter::clear_has_bg_noise() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImuNoiseParameter::clear_bg_noise() {
  bg_noise_ = 0;
  clear_has_bg_noise();
}
inline double ImuNoiseParameter::bg_noise() const {
  // @@protoc_insertion_point(field_get:hityavie.ImuNoiseParameter.bg_noise)
  return bg_noise_;
}
inline void ImuNoiseParameter::set_bg_noise(double value) {
  set_has_bg_noise();
  bg_noise_ = value;
  // @@protoc_insertion_point(field_set:hityavie.ImuNoiseParameter.bg_noise)
}

// -------------------------------------------------------------------

// CameraParam

// required string type = 1;
inline bool CameraParam::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraParam::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraParam::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& CameraParam::type() const {
  // @@protoc_insertion_point(field_get:hityavie.CameraParam.type)
  return type_.GetNoArena();
}
inline void CameraParam::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hityavie.CameraParam.type)
}
#if LANG_CXX11
inline void CameraParam::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hityavie.CameraParam.type)
}
#endif
inline void CameraParam::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hityavie.CameraParam.type)
}
inline void CameraParam::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hityavie.CameraParam.type)
}
inline ::std::string* CameraParam::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:hityavie.CameraParam.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraParam::release_type() {
  // @@protoc_insertion_point(field_release:hityavie.CameraParam.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraParam::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:hityavie.CameraParam.type)
}

// repeated double tic = 2;
inline int CameraParam::tic_size() const {
  return tic_.size();
}
inline void CameraParam::clear_tic() {
  tic_.Clear();
}
inline double CameraParam::tic(int index) const {
  // @@protoc_insertion_point(field_get:hityavie.CameraParam.tic)
  return tic_.Get(index);
}
inline void CameraParam::set_tic(int index, double value) {
  tic_.Set(index, value);
  // @@protoc_insertion_point(field_set:hityavie.CameraParam.tic)
}
inline void CameraParam::add_tic(double value) {
  tic_.Add(value);
  // @@protoc_insertion_point(field_add:hityavie.CameraParam.tic)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraParam::tic() const {
  // @@protoc_insertion_point(field_list:hityavie.CameraParam.tic)
  return tic_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraParam::mutable_tic() {
  // @@protoc_insertion_point(field_mutable_list:hityavie.CameraParam.tic)
  return &tic_;
}

// optional .hityavie.FisheyeCameraParam fisheye_param = 3;
inline bool CameraParam::has_fisheye_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraParam::set_has_fisheye_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraParam::clear_has_fisheye_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraParam::clear_fisheye_param() {
  if (fisheye_param_ != NULL) fisheye_param_->Clear();
  clear_has_fisheye_param();
}
inline const ::hityavie::FisheyeCameraParam& CameraParam::fisheye_param() const {
  const ::hityavie::FisheyeCameraParam* p = fisheye_param_;
  // @@protoc_insertion_point(field_get:hityavie.CameraParam.fisheye_param)
  return p != NULL ? *p : *reinterpret_cast<const ::hityavie::FisheyeCameraParam*>(
      &::hityavie::_FisheyeCameraParam_default_instance_);
}
inline ::hityavie::FisheyeCameraParam* CameraParam::release_fisheye_param() {
  // @@protoc_insertion_point(field_release:hityavie.CameraParam.fisheye_param)
  clear_has_fisheye_param();
  ::hityavie::FisheyeCameraParam* temp = fisheye_param_;
  fisheye_param_ = NULL;
  return temp;
}
inline ::hityavie::FisheyeCameraParam* CameraParam::mutable_fisheye_param() {
  set_has_fisheye_param();
  if (fisheye_param_ == NULL) {
    fisheye_param_ = new ::hityavie::FisheyeCameraParam;
  }
  // @@protoc_insertion_point(field_mutable:hityavie.CameraParam.fisheye_param)
  return fisheye_param_;
}
inline void CameraParam::set_allocated_fisheye_param(::hityavie::FisheyeCameraParam* fisheye_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fisheye_param_;
  }
  if (fisheye_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fisheye_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fisheye_param, submessage_arena);
    }
    set_has_fisheye_param();
  } else {
    clear_has_fisheye_param();
  }
  fisheye_param_ = fisheye_param;
  // @@protoc_insertion_point(field_set_allocated:hityavie.CameraParam.fisheye_param)
}

// -------------------------------------------------------------------

// FisheyeCameraParam

// required double fx = 1;
inline bool FisheyeCameraParam::has_fx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FisheyeCameraParam::set_has_fx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FisheyeCameraParam::clear_has_fx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FisheyeCameraParam::clear_fx() {
  fx_ = 0;
  clear_has_fx();
}
inline double FisheyeCameraParam::fx() const {
  // @@protoc_insertion_point(field_get:hityavie.FisheyeCameraParam.fx)
  return fx_;
}
inline void FisheyeCameraParam::set_fx(double value) {
  set_has_fx();
  fx_ = value;
  // @@protoc_insertion_point(field_set:hityavie.FisheyeCameraParam.fx)
}

// required double fy = 2;
inline bool FisheyeCameraParam::has_fy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FisheyeCameraParam::set_has_fy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FisheyeCameraParam::clear_has_fy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FisheyeCameraParam::clear_fy() {
  fy_ = 0;
  clear_has_fy();
}
inline double FisheyeCameraParam::fy() const {
  // @@protoc_insertion_point(field_get:hityavie.FisheyeCameraParam.fy)
  return fy_;
}
inline void FisheyeCameraParam::set_fy(double value) {
  set_has_fy();
  fy_ = value;
  // @@protoc_insertion_point(field_set:hityavie.FisheyeCameraParam.fy)
}

// required double cx = 3;
inline bool FisheyeCameraParam::has_cx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FisheyeCameraParam::set_has_cx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FisheyeCameraParam::clear_has_cx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FisheyeCameraParam::clear_cx() {
  cx_ = 0;
  clear_has_cx();
}
inline double FisheyeCameraParam::cx() const {
  // @@protoc_insertion_point(field_get:hityavie.FisheyeCameraParam.cx)
  return cx_;
}
inline void FisheyeCameraParam::set_cx(double value) {
  set_has_cx();
  cx_ = value;
  // @@protoc_insertion_point(field_set:hityavie.FisheyeCameraParam.cx)
}

// required double cy = 4;
inline bool FisheyeCameraParam::has_cy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FisheyeCameraParam::set_has_cy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FisheyeCameraParam::clear_has_cy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FisheyeCameraParam::clear_cy() {
  cy_ = 0;
  clear_has_cy();
}
inline double FisheyeCameraParam::cy() const {
  // @@protoc_insertion_point(field_get:hityavie.FisheyeCameraParam.cy)
  return cy_;
}
inline void FisheyeCameraParam::set_cy(double value) {
  set_has_cy();
  cy_ = value;
  // @@protoc_insertion_point(field_set:hityavie.FisheyeCameraParam.cy)
}

// repeated double dist = 5;
inline int FisheyeCameraParam::dist_size() const {
  return dist_.size();
}
inline void FisheyeCameraParam::clear_dist() {
  dist_.Clear();
}
inline double FisheyeCameraParam::dist(int index) const {
  // @@protoc_insertion_point(field_get:hityavie.FisheyeCameraParam.dist)
  return dist_.Get(index);
}
inline void FisheyeCameraParam::set_dist(int index, double value) {
  dist_.Set(index, value);
  // @@protoc_insertion_point(field_set:hityavie.FisheyeCameraParam.dist)
}
inline void FisheyeCameraParam::add_dist(double value) {
  dist_.Add(value);
  // @@protoc_insertion_point(field_add:hityavie.FisheyeCameraParam.dist)
}
inline const ::google::protobuf::RepeatedField< double >&
FisheyeCameraParam::dist() const {
  // @@protoc_insertion_point(field_list:hityavie.FisheyeCameraParam.dist)
  return dist_;
}
inline ::google::protobuf::RepeatedField< double >*
FisheyeCameraParam::mutable_dist() {
  // @@protoc_insertion_point(field_mutable_list:hityavie.FisheyeCameraParam.dist)
  return &dist_;
}

// required int32 width = 6;
inline bool FisheyeCameraParam::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FisheyeCameraParam::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FisheyeCameraParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FisheyeCameraParam::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 FisheyeCameraParam::width() const {
  // @@protoc_insertion_point(field_get:hityavie.FisheyeCameraParam.width)
  return width_;
}
inline void FisheyeCameraParam::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:hityavie.FisheyeCameraParam.width)
}

// required int32 height = 7;
inline bool FisheyeCameraParam::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FisheyeCameraParam::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FisheyeCameraParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FisheyeCameraParam::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 FisheyeCameraParam::height() const {
  // @@protoc_insertion_point(field_get:hityavie.FisheyeCameraParam.height)
  return height_;
}
inline void FisheyeCameraParam::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:hityavie.FisheyeCameraParam.height)
}

// -------------------------------------------------------------------

// TrackerParam

// required string type = 1;
inline bool TrackerParam::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackerParam::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackerParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackerParam::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& TrackerParam::type() const {
  // @@protoc_insertion_point(field_get:hityavie.TrackerParam.type)
  return type_.GetNoArena();
}
inline void TrackerParam::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hityavie.TrackerParam.type)
}
#if LANG_CXX11
inline void TrackerParam::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hityavie.TrackerParam.type)
}
#endif
inline void TrackerParam::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hityavie.TrackerParam.type)
}
inline void TrackerParam::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hityavie.TrackerParam.type)
}
inline ::std::string* TrackerParam::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:hityavie.TrackerParam.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackerParam::release_type() {
  // @@protoc_insertion_point(field_release:hityavie.TrackerParam.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackerParam::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:hityavie.TrackerParam.type)
}

// optional .hityavie.OpticalflowTrackerParam of_param = 2;
inline bool TrackerParam::has_of_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackerParam::set_has_of_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackerParam::clear_has_of_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackerParam::clear_of_param() {
  if (of_param_ != NULL) of_param_->Clear();
  clear_has_of_param();
}
inline const ::hityavie::OpticalflowTrackerParam& TrackerParam::of_param() const {
  const ::hityavie::OpticalflowTrackerParam* p = of_param_;
  // @@protoc_insertion_point(field_get:hityavie.TrackerParam.of_param)
  return p != NULL ? *p : *reinterpret_cast<const ::hityavie::OpticalflowTrackerParam*>(
      &::hityavie::_OpticalflowTrackerParam_default_instance_);
}
inline ::hityavie::OpticalflowTrackerParam* TrackerParam::release_of_param() {
  // @@protoc_insertion_point(field_release:hityavie.TrackerParam.of_param)
  clear_has_of_param();
  ::hityavie::OpticalflowTrackerParam* temp = of_param_;
  of_param_ = NULL;
  return temp;
}
inline ::hityavie::OpticalflowTrackerParam* TrackerParam::mutable_of_param() {
  set_has_of_param();
  if (of_param_ == NULL) {
    of_param_ = new ::hityavie::OpticalflowTrackerParam;
  }
  // @@protoc_insertion_point(field_mutable:hityavie.TrackerParam.of_param)
  return of_param_;
}
inline void TrackerParam::set_allocated_of_param(::hityavie::OpticalflowTrackerParam* of_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete of_param_;
  }
  if (of_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      of_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, of_param, submessage_arena);
    }
    set_has_of_param();
  } else {
    clear_has_of_param();
  }
  of_param_ = of_param;
  // @@protoc_insertion_point(field_set_allocated:hityavie.TrackerParam.of_param)
}

// -------------------------------------------------------------------

// OpticalflowTrackerParam

// required int32 min_feat_num = 1;
inline bool OpticalflowTrackerParam::has_min_feat_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpticalflowTrackerParam::set_has_min_feat_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpticalflowTrackerParam::clear_has_min_feat_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpticalflowTrackerParam::clear_min_feat_num() {
  min_feat_num_ = 0;
  clear_has_min_feat_num();
}
inline ::google::protobuf::int32 OpticalflowTrackerParam::min_feat_num() const {
  // @@protoc_insertion_point(field_get:hityavie.OpticalflowTrackerParam.min_feat_num)
  return min_feat_num_;
}
inline void OpticalflowTrackerParam::set_min_feat_num(::google::protobuf::int32 value) {
  set_has_min_feat_num();
  min_feat_num_ = value;
  // @@protoc_insertion_point(field_set:hityavie.OpticalflowTrackerParam.min_feat_num)
}

// required double nms_dist_thre = 2;
inline bool OpticalflowTrackerParam::has_nms_dist_thre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpticalflowTrackerParam::set_has_nms_dist_thre() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpticalflowTrackerParam::clear_has_nms_dist_thre() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpticalflowTrackerParam::clear_nms_dist_thre() {
  nms_dist_thre_ = 0;
  clear_has_nms_dist_thre();
}
inline double OpticalflowTrackerParam::nms_dist_thre() const {
  // @@protoc_insertion_point(field_get:hityavie.OpticalflowTrackerParam.nms_dist_thre)
  return nms_dist_thre_;
}
inline void OpticalflowTrackerParam::set_nms_dist_thre(double value) {
  set_has_nms_dist_thre();
  nms_dist_thre_ = value;
  // @@protoc_insertion_point(field_set:hityavie.OpticalflowTrackerParam.nms_dist_thre)
}

// required int32 det_thre = 3;
inline bool OpticalflowTrackerParam::has_det_thre() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpticalflowTrackerParam::set_has_det_thre() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpticalflowTrackerParam::clear_has_det_thre() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpticalflowTrackerParam::clear_det_thre() {
  det_thre_ = 0;
  clear_has_det_thre();
}
inline ::google::protobuf::int32 OpticalflowTrackerParam::det_thre() const {
  // @@protoc_insertion_point(field_get:hityavie.OpticalflowTrackerParam.det_thre)
  return det_thre_;
}
inline void OpticalflowTrackerParam::set_det_thre(::google::protobuf::int32 value) {
  set_has_det_thre();
  det_thre_ = value;
  // @@protoc_insertion_point(field_set:hityavie.OpticalflowTrackerParam.det_thre)
}

// required double bd_thre = 4;
inline bool OpticalflowTrackerParam::has_bd_thre() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpticalflowTrackerParam::set_has_bd_thre() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpticalflowTrackerParam::clear_has_bd_thre() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpticalflowTrackerParam::clear_bd_thre() {
  bd_thre_ = 0;
  clear_has_bd_thre();
}
inline double OpticalflowTrackerParam::bd_thre() const {
  // @@protoc_insertion_point(field_get:hityavie.OpticalflowTrackerParam.bd_thre)
  return bd_thre_;
}
inline void OpticalflowTrackerParam::set_bd_thre(double value) {
  set_has_bd_thre();
  bd_thre_ = value;
  // @@protoc_insertion_point(field_set:hityavie.OpticalflowTrackerParam.bd_thre)
}

// -------------------------------------------------------------------

// SfmParam

// required int32 min_eff_obs_num = 1;
inline bool SfmParam::has_min_eff_obs_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SfmParam::set_has_min_eff_obs_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SfmParam::clear_has_min_eff_obs_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SfmParam::clear_min_eff_obs_num() {
  min_eff_obs_num_ = 0;
  clear_has_min_eff_obs_num();
}
inline ::google::protobuf::int32 SfmParam::min_eff_obs_num() const {
  // @@protoc_insertion_point(field_get:hityavie.SfmParam.min_eff_obs_num)
  return min_eff_obs_num_;
}
inline void SfmParam::set_min_eff_obs_num(::google::protobuf::int32 value) {
  set_has_min_eff_obs_num();
  min_eff_obs_num_ = value;
  // @@protoc_insertion_point(field_set:hityavie.SfmParam.min_eff_obs_num)
}

// required int32 max_frm_interval = 2;
inline bool SfmParam::has_max_frm_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SfmParam::set_has_max_frm_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SfmParam::clear_has_max_frm_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SfmParam::clear_max_frm_interval() {
  max_frm_interval_ = 0;
  clear_has_max_frm_interval();
}
inline ::google::protobuf::int32 SfmParam::max_frm_interval() const {
  // @@protoc_insertion_point(field_get:hityavie.SfmParam.max_frm_interval)
  return max_frm_interval_;
}
inline void SfmParam::set_max_frm_interval(::google::protobuf::int32 value) {
  set_has_max_frm_interval();
  max_frm_interval_ = value;
  // @@protoc_insertion_point(field_set:hityavie.SfmParam.max_frm_interval)
}

// required int32 local_win_size = 3;
inline bool SfmParam::has_local_win_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SfmParam::set_has_local_win_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SfmParam::clear_has_local_win_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SfmParam::clear_local_win_size() {
  local_win_size_ = 0;
  clear_has_local_win_size();
}
inline ::google::protobuf::int32 SfmParam::local_win_size() const {
  // @@protoc_insertion_point(field_get:hityavie.SfmParam.local_win_size)
  return local_win_size_;
}
inline void SfmParam::set_local_win_size(::google::protobuf::int32 value) {
  set_has_local_win_size();
  local_win_size_ = value;
  // @@protoc_insertion_point(field_set:hityavie.SfmParam.local_win_size)
}

// required int32 min_tracking_feat_num = 4;
inline bool SfmParam::has_min_tracking_feat_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SfmParam::set_has_min_tracking_feat_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SfmParam::clear_has_min_tracking_feat_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SfmParam::clear_min_tracking_feat_num() {
  min_tracking_feat_num_ = 0;
  clear_has_min_tracking_feat_num();
}
inline ::google::protobuf::int32 SfmParam::min_tracking_feat_num() const {
  // @@protoc_insertion_point(field_get:hityavie.SfmParam.min_tracking_feat_num)
  return min_tracking_feat_num_;
}
inline void SfmParam::set_min_tracking_feat_num(::google::protobuf::int32 value) {
  set_has_min_tracking_feat_num();
  min_tracking_feat_num_ = value;
  // @@protoc_insertion_point(field_set:hityavie.SfmParam.min_tracking_feat_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hityavie

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_param_2eproto__INCLUDED
